#[
    OpenGL loader generated by glad 0.1.33 on Sat Oct 26 20:19:13 2019.

    Language/Generator: Nim
    Specification: gl
    APIs: gl=3.2
    Profile: core
    Extensions:
        
    Loader: True
    Local files: False
    Omit khrplatform: False
    Reproducible: False

    Commandline:
        --profile="core" --api="gl=3.2" --generator="nim" --spec="gl" --extensions=""
    Online:
        https://glad.dav1d.de/#profile=core&language=nim&specification=gl&loader=on&api=gl%3D3.2
]#

import strutils

var glVersionMajor, glVersionMinor: int

# Types
type
  ClContext* = distinct pointer
  ClEvent* = distinct pointer
  GLbitfield* = uint32
  GLboolean* = bool
  GLbyte* = int8
  GLchar* = char
  GLcharARB* = byte
  GLclampd* = float64
  GLclampf* = float32
  GLclampx* = int32
  GLdouble* = float64
  GLeglImageOES* = distinct pointer
  GLenum* = uint32
  GLfixed* = int32
  GLfloat* = float32
  GLhalf* = uint16
  GLhalfARB* = uint16
  GLhalfNV* = uint16
  GLhandleARB* = uint32
  GLint* = int32
  GLint64* = int64
  GLint64EXT* = int64
  GLintptr* = int
  GLintptrARB* = int
  GLshort* = int16
  GLsizei* = int32
  GLsizeiptr* = int
  GLsizeiptrARB* = int
  GLsync* = distinct pointer
  GLubyte* = uint8
  GLuint* = uint32
  GLuint64* = uint64
  GLuint64EXT* = uint64
  GLushort* = uint16
  GLvdpauSurfaceNV* = int32
  GLvoid* = pointer

  GLdebugProc* = proc (
    source: GLenum,
    typ: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}

  GLdebugProcArb* = proc (
    source: GLenum,
    typ: GLenum,
    id: GLuint,
    severity: GLenum,
    len: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}

  GLdebugProcAmd* = proc (
    id: GLuint,
    category: GLenum,
    severity: GLenum,
    len: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}

  GLdebugProcKhr* = proc (
    source, typ: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}


# Enums
const
  GL_FALSE* = 0
  GL_INVALID_INDEX*: uint32 = 0xFFFFFFFF'u32
  GL_NONE* = 0
  GL_NONE_OES* = 0
  GL_NO_ERROR* = 0
  GL_ONE* = 1
  GL_TIMEOUT_IGNORED* = 0xFFFFFFFFFFFFFFFF'u64
  GL_TIMEOUT_IGNORED_APPLE* = 0xFFFFFFFFFFFFFFFF'u64
  GL_TRUE* = 1
  GL_VERSION_ES_CL_1_0* = 1
  GL_VERSION_ES_CL_1_1* = 1
  GL_VERSION_ES_CM_1_1* = 1
  GL_ZERO* = 0

  GL_DEPTH_BUFFER_BIT*: GLenum = GLenum(0x00000100)
  GL_STENCIL_BUFFER_BIT*: GLenum = GLenum(0x00000400)
  GL_COLOR_BUFFER_BIT*: GLenum = GLenum(0x00004000)
  GL_POINTS*: GLenum = GLenum(0x0000)
  GL_LINES*: GLenum = GLenum(0x0001)
  GL_LINE_LOOP*: GLenum = GLenum(0x0002)
  GL_LINE_STRIP*: GLenum = GLenum(0x0003)
  GL_TRIANGLES*: GLenum = GLenum(0x0004)
  GL_TRIANGLE_STRIP*: GLenum = GLenum(0x0005)
  GL_TRIANGLE_FAN*: GLenum = GLenum(0x0006)
  GL_NEVER*: GLenum = GLenum(0x0200)
  GL_LESS*: GLenum = GLenum(0x0201)
  GL_EQUAL*: GLenum = GLenum(0x0202)
  GL_LEQUAL*: GLenum = GLenum(0x0203)
  GL_GREATER*: GLenum = GLenum(0x0204)
  GL_NOTEQUAL*: GLenum = GLenum(0x0205)
  GL_GEQUAL*: GLenum = GLenum(0x0206)
  GL_ALWAYS*: GLenum = GLenum(0x0207)
  GL_SRC_COLOR*: GLenum = GLenum(0x0300)
  GL_ONE_MINUS_SRC_COLOR*: GLenum = GLenum(0x0301)
  GL_SRC_ALPHA*: GLenum = GLenum(0x0302)
  GL_ONE_MINUS_SRC_ALPHA*: GLenum = GLenum(0x0303)
  GL_DST_ALPHA*: GLenum = GLenum(0x0304)
  GL_ONE_MINUS_DST_ALPHA*: GLenum = GLenum(0x0305)
  GL_DST_COLOR*: GLenum = GLenum(0x0306)
  GL_ONE_MINUS_DST_COLOR*: GLenum = GLenum(0x0307)
  GL_SRC_ALPHA_SATURATE*: GLenum = GLenum(0x0308)
  GL_FRONT_LEFT*: GLenum = GLenum(0x0400)
  GL_FRONT_RIGHT*: GLenum = GLenum(0x0401)
  GL_BACK_LEFT*: GLenum = GLenum(0x0402)
  GL_BACK_RIGHT*: GLenum = GLenum(0x0403)
  GL_FRONT*: GLenum = GLenum(0x0404)
  GL_BACK*: GLenum = GLenum(0x0405)
  GL_LEFT*: GLenum = GLenum(0x0406)
  GL_RIGHT*: GLenum = GLenum(0x0407)
  GL_FRONT_AND_BACK*: GLenum = GLenum(0x0408)
  GL_INVALID_ENUM*: GLenum = GLenum(0x0500)
  GL_INVALID_VALUE*: GLenum = GLenum(0x0501)
  GL_INVALID_OPERATION*: GLenum = GLenum(0x0502)
  GL_OUT_OF_MEMORY*: GLenum = GLenum(0x0505)
  GL_CW*: GLenum = GLenum(0x0900)
  GL_CCW*: GLenum = GLenum(0x0901)
  GL_POINT_SIZE*: GLenum = GLenum(0x0B11)
  GL_POINT_SIZE_RANGE*: GLenum = GLenum(0x0B12)
  GL_POINT_SIZE_GRANULARITY*: GLenum = GLenum(0x0B13)
  GL_LINE_SMOOTH*: GLenum = GLenum(0x0B20)
  GL_LINE_WIDTH*: GLenum = GLenum(0x0B21)
  GL_LINE_WIDTH_RANGE*: GLenum = GLenum(0x0B22)
  GL_LINE_WIDTH_GRANULARITY*: GLenum = GLenum(0x0B23)
  GL_POLYGON_MODE*: GLenum = GLenum(0x0B40)
  GL_POLYGON_SMOOTH*: GLenum = GLenum(0x0B41)
  GL_CULL_FACE*: GLenum = GLenum(0x0B44)
  GL_CULL_FACE_MODE*: GLenum = GLenum(0x0B45)
  GL_FRONT_FACE*: GLenum = GLenum(0x0B46)
  GL_DEPTH_RANGE*: GLenum = GLenum(0x0B70)
  GL_DEPTH_TEST*: GLenum = GLenum(0x0B71)
  GL_DEPTH_WRITEMASK*: GLenum = GLenum(0x0B72)
  GL_DEPTH_CLEAR_VALUE*: GLenum = GLenum(0x0B73)
  GL_DEPTH_FUNC*: GLenum = GLenum(0x0B74)
  GL_STENCIL_TEST*: GLenum = GLenum(0x0B90)
  GL_STENCIL_CLEAR_VALUE*: GLenum = GLenum(0x0B91)
  GL_STENCIL_FUNC*: GLenum = GLenum(0x0B92)
  GL_STENCIL_VALUE_MASK*: GLenum = GLenum(0x0B93)
  GL_STENCIL_FAIL*: GLenum = GLenum(0x0B94)
  GL_STENCIL_PASS_DEPTH_FAIL*: GLenum = GLenum(0x0B95)
  GL_STENCIL_PASS_DEPTH_PASS*: GLenum = GLenum(0x0B96)
  GL_STENCIL_REF*: GLenum = GLenum(0x0B97)
  GL_STENCIL_WRITEMASK*: GLenum = GLenum(0x0B98)
  GL_VIEWPORT*: GLenum = GLenum(0x0BA2)
  GL_DITHER*: GLenum = GLenum(0x0BD0)
  GL_BLEND_DST*: GLenum = GLenum(0x0BE0)
  GL_BLEND_SRC*: GLenum = GLenum(0x0BE1)
  GL_BLEND*: GLenum = GLenum(0x0BE2)
  GL_LOGIC_OP_MODE*: GLenum = GLenum(0x0BF0)
  GL_DRAW_BUFFER*: GLenum = GLenum(0x0C01)
  GL_READ_BUFFER*: GLenum = GLenum(0x0C02)
  GL_SCISSOR_BOX*: GLenum = GLenum(0x0C10)
  GL_SCISSOR_TEST*: GLenum = GLenum(0x0C11)
  GL_COLOR_CLEAR_VALUE*: GLenum = GLenum(0x0C22)
  GL_COLOR_WRITEMASK*: GLenum = GLenum(0x0C23)
  GL_DOUBLEBUFFER*: GLenum = GLenum(0x0C32)
  GL_STEREO*: GLenum = GLenum(0x0C33)
  GL_LINE_SMOOTH_HINT*: GLenum = GLenum(0x0C52)
  GL_POLYGON_SMOOTH_HINT*: GLenum = GLenum(0x0C53)
  GL_UNPACK_SWAP_BYTES*: GLenum = GLenum(0x0CF0)
  GL_UNPACK_LSB_FIRST*: GLenum = GLenum(0x0CF1)
  GL_UNPACK_ROW_LENGTH*: GLenum = GLenum(0x0CF2)
  GL_UNPACK_SKIP_ROWS*: GLenum = GLenum(0x0CF3)
  GL_UNPACK_SKIP_PIXELS*: GLenum = GLenum(0x0CF4)
  GL_UNPACK_ALIGNMENT*: GLenum = GLenum(0x0CF5)
  GL_PACK_SWAP_BYTES*: GLenum = GLenum(0x0D00)
  GL_PACK_LSB_FIRST*: GLenum = GLenum(0x0D01)
  GL_PACK_ROW_LENGTH*: GLenum = GLenum(0x0D02)
  GL_PACK_SKIP_ROWS*: GLenum = GLenum(0x0D03)
  GL_PACK_SKIP_PIXELS*: GLenum = GLenum(0x0D04)
  GL_PACK_ALIGNMENT*: GLenum = GLenum(0x0D05)
  GL_MAX_TEXTURE_SIZE*: GLenum = GLenum(0x0D33)
  GL_MAX_VIEWPORT_DIMS*: GLenum = GLenum(0x0D3A)
  GL_SUBPIXEL_BITS*: GLenum = GLenum(0x0D50)
  GL_TEXTURE_1D*: GLenum = GLenum(0x0DE0)
  GL_TEXTURE_2D*: GLenum = GLenum(0x0DE1)
  GL_TEXTURE_WIDTH*: GLenum = GLenum(0x1000)
  GL_TEXTURE_HEIGHT*: GLenum = GLenum(0x1001)
  GL_TEXTURE_BORDER_COLOR*: GLenum = GLenum(0x1004)
  GL_DONT_CARE*: GLenum = GLenum(0x1100)
  GL_FASTEST*: GLenum = GLenum(0x1101)
  GL_NICEST*: GLenum = GLenum(0x1102)
  cGL_BYTE*: GLenum = GLenum(0x1400)
  GL_UNSIGNED_BYTE*: GLenum = GLenum(0x1401)
  cGL_SHORT*: GLenum = GLenum(0x1402)
  GL_UNSIGNED_SHORT*: GLenum = GLenum(0x1403)
  cGL_INT*: GLenum = GLenum(0x1404)
  GL_UNSIGNED_INT*: GLenum = GLenum(0x1405)
  cGL_FLOAT*: GLenum = GLenum(0x1406)
  GL_CLEAR*: GLenum = GLenum(0x1500)
  GL_AND*: GLenum = GLenum(0x1501)
  GL_AND_REVERSE*: GLenum = GLenum(0x1502)
  GL_COPY*: GLenum = GLenum(0x1503)
  GL_AND_INVERTED*: GLenum = GLenum(0x1504)
  GL_NOOP*: GLenum = GLenum(0x1505)
  GL_XOR*: GLenum = GLenum(0x1506)
  GL_OR*: GLenum = GLenum(0x1507)
  GL_NOR*: GLenum = GLenum(0x1508)
  GL_EQUIV*: GLenum = GLenum(0x1509)
  GL_INVERT*: GLenum = GLenum(0x150A)
  GL_OR_REVERSE*: GLenum = GLenum(0x150B)
  GL_COPY_INVERTED*: GLenum = GLenum(0x150C)
  GL_OR_INVERTED*: GLenum = GLenum(0x150D)
  GL_NAND*: GLenum = GLenum(0x150E)
  GL_SET*: GLenum = GLenum(0x150F)
  GL_TEXTURE*: GLenum = GLenum(0x1702)
  GL_COLOR*: GLenum = GLenum(0x1800)
  GL_DEPTH*: GLenum = GLenum(0x1801)
  GL_STENCIL*: GLenum = GLenum(0x1802)
  GL_STENCIL_INDEX*: GLenum = GLenum(0x1901)
  GL_DEPTH_COMPONENT*: GLenum = GLenum(0x1902)
  GL_RED*: GLenum = GLenum(0x1903)
  GL_GREEN*: GLenum = GLenum(0x1904)
  GL_BLUE*: GLenum = GLenum(0x1905)
  GL_ALPHA*: GLenum = GLenum(0x1906)
  GL_RGB*: GLenum = GLenum(0x1907)
  GL_RGBA*: GLenum = GLenum(0x1908)
  GL_POINT*: GLenum = GLenum(0x1B00)
  GL_LINE*: GLenum = GLenum(0x1B01)
  GL_FILL*: GLenum = GLenum(0x1B02)
  GL_KEEP*: GLenum = GLenum(0x1E00)
  GL_REPLACE*: GLenum = GLenum(0x1E01)
  GL_INCR*: GLenum = GLenum(0x1E02)
  GL_DECR*: GLenum = GLenum(0x1E03)
  GL_VENDOR*: GLenum = GLenum(0x1F00)
  GL_RENDERER*: GLenum = GLenum(0x1F01)
  GL_VERSION*: GLenum = GLenum(0x1F02)
  GL_EXTENSIONS*: GLenum = GLenum(0x1F03)
  GL_NEAREST*: GLenum = GLenum(0x2600)
  GL_LINEAR*: GLenum = GLenum(0x2601)
  GL_NEAREST_MIPMAP_NEAREST*: GLenum = GLenum(0x2700)
  GL_LINEAR_MIPMAP_NEAREST*: GLenum = GLenum(0x2701)
  GL_NEAREST_MIPMAP_LINEAR*: GLenum = GLenum(0x2702)
  GL_LINEAR_MIPMAP_LINEAR*: GLenum = GLenum(0x2703)
  GL_TEXTURE_MAG_FILTER*: GLenum = GLenum(0x2800)
  GL_TEXTURE_MIN_FILTER*: GLenum = GLenum(0x2801)
  GL_TEXTURE_WRAP_S*: GLenum = GLenum(0x2802)
  GL_TEXTURE_WRAP_T*: GLenum = GLenum(0x2803)
  GL_REPEAT*: GLenum = GLenum(0x2901)
  GL_COLOR_LOGIC_OP*: GLenum = GLenum(0x0BF2)
  GL_POLYGON_OFFSET_UNITS*: GLenum = GLenum(0x2A00)
  GL_POLYGON_OFFSET_POINT*: GLenum = GLenum(0x2A01)
  GL_POLYGON_OFFSET_LINE*: GLenum = GLenum(0x2A02)
  GL_POLYGON_OFFSET_FILL*: GLenum = GLenum(0x8037)
  GL_POLYGON_OFFSET_FACTOR*: GLenum = GLenum(0x8038)
  GL_TEXTURE_BINDING_1D*: GLenum = GLenum(0x8068)
  GL_TEXTURE_BINDING_2D*: GLenum = GLenum(0x8069)
  GL_TEXTURE_INTERNAL_FORMAT*: GLenum = GLenum(0x1003)
  GL_TEXTURE_RED_SIZE*: GLenum = GLenum(0x805C)
  GL_TEXTURE_GREEN_SIZE*: GLenum = GLenum(0x805D)
  GL_TEXTURE_BLUE_SIZE*: GLenum = GLenum(0x805E)
  GL_TEXTURE_ALPHA_SIZE*: GLenum = GLenum(0x805F)
  cGL_DOUBLE*: GLenum = GLenum(0x140A)
  GL_PROXY_TEXTURE_1D*: GLenum = GLenum(0x8063)
  GL_PROXY_TEXTURE_2D*: GLenum = GLenum(0x8064)
  GL_R3_G3_B2*: GLenum = GLenum(0x2A10)
  GL_RGB4*: GLenum = GLenum(0x804F)
  GL_RGB5*: GLenum = GLenum(0x8050)
  GL_RGB8*: GLenum = GLenum(0x8051)
  GL_RGB10*: GLenum = GLenum(0x8052)
  GL_RGB12*: GLenum = GLenum(0x8053)
  GL_RGB16*: GLenum = GLenum(0x8054)
  GL_RGBA2*: GLenum = GLenum(0x8055)
  GL_RGBA4*: GLenum = GLenum(0x8056)
  GL_RGB5_A1*: GLenum = GLenum(0x8057)
  GL_RGBA8*: GLenum = GLenum(0x8058)
  GL_RGB10_A2*: GLenum = GLenum(0x8059)
  GL_RGBA12*: GLenum = GLenum(0x805A)
  GL_RGBA16*: GLenum = GLenum(0x805B)
  GL_UNSIGNED_BYTE_3_3_2*: GLenum = GLenum(0x8032)
  GL_UNSIGNED_SHORT_4_4_4_4*: GLenum = GLenum(0x8033)
  GL_UNSIGNED_SHORT_5_5_5_1*: GLenum = GLenum(0x8034)
  GL_UNSIGNED_INT_8_8_8_8*: GLenum = GLenum(0x8035)
  GL_UNSIGNED_INT_10_10_10_2*: GLenum = GLenum(0x8036)
  GL_TEXTURE_BINDING_3D*: GLenum = GLenum(0x806A)
  GL_PACK_SKIP_IMAGES*: GLenum = GLenum(0x806B)
  GL_PACK_IMAGE_HEIGHT*: GLenum = GLenum(0x806C)
  GL_UNPACK_SKIP_IMAGES*: GLenum = GLenum(0x806D)
  GL_UNPACK_IMAGE_HEIGHT*: GLenum = GLenum(0x806E)
  GL_TEXTURE_3D*: GLenum = GLenum(0x806F)
  GL_PROXY_TEXTURE_3D*: GLenum = GLenum(0x8070)
  GL_TEXTURE_DEPTH*: GLenum = GLenum(0x8071)
  GL_TEXTURE_WRAP_R*: GLenum = GLenum(0x8072)
  GL_MAX_3D_TEXTURE_SIZE*: GLenum = GLenum(0x8073)
  GL_UNSIGNED_BYTE_2_3_3_REV*: GLenum = GLenum(0x8362)
  GL_UNSIGNED_SHORT_5_6_5*: GLenum = GLenum(0x8363)
  GL_UNSIGNED_SHORT_5_6_5_REV*: GLenum = GLenum(0x8364)
  GL_UNSIGNED_SHORT_4_4_4_4_REV*: GLenum = GLenum(0x8365)
  GL_UNSIGNED_SHORT_1_5_5_5_REV*: GLenum = GLenum(0x8366)
  GL_UNSIGNED_INT_8_8_8_8_REV*: GLenum = GLenum(0x8367)
  GL_UNSIGNED_INT_2_10_10_10_REV*: GLenum = GLenum(0x8368)
  GL_BGR*: GLenum = GLenum(0x80E0)
  GL_BGRA*: GLenum = GLenum(0x80E1)
  GL_MAX_ELEMENTS_VERTICES*: GLenum = GLenum(0x80E8)
  GL_MAX_ELEMENTS_INDICES*: GLenum = GLenum(0x80E9)
  GL_CLAMP_TO_EDGE*: GLenum = GLenum(0x812F)
  GL_TEXTURE_MIN_LOD*: GLenum = GLenum(0x813A)
  GL_TEXTURE_MAX_LOD*: GLenum = GLenum(0x813B)
  GL_TEXTURE_BASE_LEVEL*: GLenum = GLenum(0x813C)
  GL_TEXTURE_MAX_LEVEL*: GLenum = GLenum(0x813D)
  GL_SMOOTH_POINT_SIZE_RANGE*: GLenum = GLenum(0x0B12)
  GL_SMOOTH_POINT_SIZE_GRANULARITY*: GLenum = GLenum(0x0B13)
  GL_SMOOTH_LINE_WIDTH_RANGE*: GLenum = GLenum(0x0B22)
  GL_SMOOTH_LINE_WIDTH_GRANULARITY*: GLenum = GLenum(0x0B23)
  GL_ALIASED_LINE_WIDTH_RANGE*: GLenum = GLenum(0x846E)
  GL_TEXTURE0*: GLenum = GLenum(0x84C0)
  GL_TEXTURE1*: GLenum = GLenum(0x84C1)
  GL_TEXTURE2*: GLenum = GLenum(0x84C2)
  GL_TEXTURE3*: GLenum = GLenum(0x84C3)
  GL_TEXTURE4*: GLenum = GLenum(0x84C4)
  GL_TEXTURE5*: GLenum = GLenum(0x84C5)
  GL_TEXTURE6*: GLenum = GLenum(0x84C6)
  GL_TEXTURE7*: GLenum = GLenum(0x84C7)
  GL_TEXTURE8*: GLenum = GLenum(0x84C8)
  GL_TEXTURE9*: GLenum = GLenum(0x84C9)
  GL_TEXTURE10*: GLenum = GLenum(0x84CA)
  GL_TEXTURE11*: GLenum = GLenum(0x84CB)
  GL_TEXTURE12*: GLenum = GLenum(0x84CC)
  GL_TEXTURE13*: GLenum = GLenum(0x84CD)
  GL_TEXTURE14*: GLenum = GLenum(0x84CE)
  GL_TEXTURE15*: GLenum = GLenum(0x84CF)
  GL_TEXTURE16*: GLenum = GLenum(0x84D0)
  GL_TEXTURE17*: GLenum = GLenum(0x84D1)
  GL_TEXTURE18*: GLenum = GLenum(0x84D2)
  GL_TEXTURE19*: GLenum = GLenum(0x84D3)
  GL_TEXTURE20*: GLenum = GLenum(0x84D4)
  GL_TEXTURE21*: GLenum = GLenum(0x84D5)
  GL_TEXTURE22*: GLenum = GLenum(0x84D6)
  GL_TEXTURE23*: GLenum = GLenum(0x84D7)
  GL_TEXTURE24*: GLenum = GLenum(0x84D8)
  GL_TEXTURE25*: GLenum = GLenum(0x84D9)
  GL_TEXTURE26*: GLenum = GLenum(0x84DA)
  GL_TEXTURE27*: GLenum = GLenum(0x84DB)
  GL_TEXTURE28*: GLenum = GLenum(0x84DC)
  GL_TEXTURE29*: GLenum = GLenum(0x84DD)
  GL_TEXTURE30*: GLenum = GLenum(0x84DE)
  GL_TEXTURE31*: GLenum = GLenum(0x84DF)
  GL_ACTIVE_TEXTURE*: GLenum = GLenum(0x84E0)
  GL_MULTISAMPLE*: GLenum = GLenum(0x809D)
  GL_SAMPLE_ALPHA_TO_COVERAGE*: GLenum = GLenum(0x809E)
  GL_SAMPLE_ALPHA_TO_ONE*: GLenum = GLenum(0x809F)
  GL_SAMPLE_COVERAGE*: GLenum = GLenum(0x80A0)
  GL_SAMPLE_BUFFERS*: GLenum = GLenum(0x80A8)
  GL_SAMPLES*: GLenum = GLenum(0x80A9)
  GL_SAMPLE_COVERAGE_VALUE*: GLenum = GLenum(0x80AA)
  GL_SAMPLE_COVERAGE_INVERT*: GLenum = GLenum(0x80AB)
  GL_TEXTURE_CUBE_MAP*: GLenum = GLenum(0x8513)
  GL_TEXTURE_BINDING_CUBE_MAP*: GLenum = GLenum(0x8514)
  GL_TEXTURE_CUBE_MAP_POSITIVE_X*: GLenum = GLenum(0x8515)
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X*: GLenum = GLenum(0x8516)
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y*: GLenum = GLenum(0x8517)
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y*: GLenum = GLenum(0x8518)
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z*: GLenum = GLenum(0x8519)
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z*: GLenum = GLenum(0x851A)
  GL_PROXY_TEXTURE_CUBE_MAP*: GLenum = GLenum(0x851B)
  GL_MAX_CUBE_MAP_TEXTURE_SIZE*: GLenum = GLenum(0x851C)
  GL_COMPRESSED_RGB*: GLenum = GLenum(0x84ED)
  GL_COMPRESSED_RGBA*: GLenum = GLenum(0x84EE)
  GL_TEXTURE_COMPRESSION_HINT*: GLenum = GLenum(0x84EF)
  GL_TEXTURE_COMPRESSED_IMAGE_SIZE*: GLenum = GLenum(0x86A0)
  GL_TEXTURE_COMPRESSED*: GLenum = GLenum(0x86A1)
  GL_NUM_COMPRESSED_TEXTURE_FORMATS*: GLenum = GLenum(0x86A2)
  GL_COMPRESSED_TEXTURE_FORMATS*: GLenum = GLenum(0x86A3)
  GL_CLAMP_TO_BORDER*: GLenum = GLenum(0x812D)
  GL_BLEND_DST_RGB*: GLenum = GLenum(0x80C8)
  GL_BLEND_SRC_RGB*: GLenum = GLenum(0x80C9)
  GL_BLEND_DST_ALPHA*: GLenum = GLenum(0x80CA)
  GL_BLEND_SRC_ALPHA*: GLenum = GLenum(0x80CB)
  GL_POINT_FADE_THRESHOLD_SIZE*: GLenum = GLenum(0x8128)
  GL_DEPTH_COMPONENT16*: GLenum = GLenum(0x81A5)
  GL_DEPTH_COMPONENT24*: GLenum = GLenum(0x81A6)
  GL_DEPTH_COMPONENT32*: GLenum = GLenum(0x81A7)
  GL_MIRRORED_REPEAT*: GLenum = GLenum(0x8370)
  GL_MAX_TEXTURE_LOD_BIAS*: GLenum = GLenum(0x84FD)
  GL_TEXTURE_LOD_BIAS*: GLenum = GLenum(0x8501)
  GL_INCR_WRAP*: GLenum = GLenum(0x8507)
  GL_DECR_WRAP*: GLenum = GLenum(0x8508)
  GL_TEXTURE_DEPTH_SIZE*: GLenum = GLenum(0x884A)
  GL_TEXTURE_COMPARE_MODE*: GLenum = GLenum(0x884C)
  GL_TEXTURE_COMPARE_FUNC*: GLenum = GLenum(0x884D)
  GL_BLEND_COLOR*: GLenum = GLenum(0x8005)
  GL_BLEND_EQUATION*: GLenum = GLenum(0x8009)
  GL_CONSTANT_COLOR*: GLenum = GLenum(0x8001)
  GL_ONE_MINUS_CONSTANT_COLOR*: GLenum = GLenum(0x8002)
  GL_CONSTANT_ALPHA*: GLenum = GLenum(0x8003)
  GL_ONE_MINUS_CONSTANT_ALPHA*: GLenum = GLenum(0x8004)
  GL_FUNC_ADD*: GLenum = GLenum(0x8006)
  GL_FUNC_REVERSE_SUBTRACT*: GLenum = GLenum(0x800B)
  GL_FUNC_SUBTRACT*: GLenum = GLenum(0x800A)
  GL_MIN*: GLenum = GLenum(0x8007)
  GL_MAX*: GLenum = GLenum(0x8008)
  GL_BUFFER_SIZE*: GLenum = GLenum(0x8764)
  GL_BUFFER_USAGE*: GLenum = GLenum(0x8765)
  GL_QUERY_COUNTER_BITS*: GLenum = GLenum(0x8864)
  GL_CURRENT_QUERY*: GLenum = GLenum(0x8865)
  GL_QUERY_RESULT*: GLenum = GLenum(0x8866)
  GL_QUERY_RESULT_AVAILABLE*: GLenum = GLenum(0x8867)
  GL_ARRAY_BUFFER*: GLenum = GLenum(0x8892)
  GL_ELEMENT_ARRAY_BUFFER*: GLenum = GLenum(0x8893)
  GL_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x8894)
  GL_ELEMENT_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x8895)
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x889F)
  GL_READ_ONLY*: GLenum = GLenum(0x88B8)
  GL_WRITE_ONLY*: GLenum = GLenum(0x88B9)
  GL_READ_WRITE*: GLenum = GLenum(0x88BA)
  GL_BUFFER_ACCESS*: GLenum = GLenum(0x88BB)
  GL_BUFFER_MAPPED*: GLenum = GLenum(0x88BC)
  GL_BUFFER_MAP_POINTER*: GLenum = GLenum(0x88BD)
  GL_STREAM_DRAW*: GLenum = GLenum(0x88E0)
  GL_STREAM_READ*: GLenum = GLenum(0x88E1)
  GL_STREAM_COPY*: GLenum = GLenum(0x88E2)
  GL_STATIC_DRAW*: GLenum = GLenum(0x88E4)
  GL_STATIC_READ*: GLenum = GLenum(0x88E5)
  GL_STATIC_COPY*: GLenum = GLenum(0x88E6)
  GL_DYNAMIC_DRAW*: GLenum = GLenum(0x88E8)
  GL_DYNAMIC_READ*: GLenum = GLenum(0x88E9)
  GL_DYNAMIC_COPY*: GLenum = GLenum(0x88EA)
  GL_SAMPLES_PASSED*: GLenum = GLenum(0x8914)
  GL_SRC1_ALPHA*: GLenum = GLenum(0x8589)
  GL_BLEND_EQUATION_RGB*: GLenum = GLenum(0x8009)
  GL_VERTEX_ATTRIB_ARRAY_ENABLED*: GLenum = GLenum(0x8622)
  GL_VERTEX_ATTRIB_ARRAY_SIZE*: GLenum = GLenum(0x8623)
  GL_VERTEX_ATTRIB_ARRAY_STRIDE*: GLenum = GLenum(0x8624)
  GL_VERTEX_ATTRIB_ARRAY_TYPE*: GLenum = GLenum(0x8625)
  GL_CURRENT_VERTEX_ATTRIB*: GLenum = GLenum(0x8626)
  GL_VERTEX_PROGRAM_POINT_SIZE*: GLenum = GLenum(0x8642)
  GL_VERTEX_ATTRIB_ARRAY_POINTER*: GLenum = GLenum(0x8645)
  GL_STENCIL_BACK_FUNC*: GLenum = GLenum(0x8800)
  GL_STENCIL_BACK_FAIL*: GLenum = GLenum(0x8801)
  GL_STENCIL_BACK_PASS_DEPTH_FAIL*: GLenum = GLenum(0x8802)
  GL_STENCIL_BACK_PASS_DEPTH_PASS*: GLenum = GLenum(0x8803)
  GL_MAX_DRAW_BUFFERS*: GLenum = GLenum(0x8824)
  GL_DRAW_BUFFER0*: GLenum = GLenum(0x8825)
  GL_DRAW_BUFFER1*: GLenum = GLenum(0x8826)
  GL_DRAW_BUFFER2*: GLenum = GLenum(0x8827)
  GL_DRAW_BUFFER3*: GLenum = GLenum(0x8828)
  GL_DRAW_BUFFER4*: GLenum = GLenum(0x8829)
  GL_DRAW_BUFFER5*: GLenum = GLenum(0x882A)
  GL_DRAW_BUFFER6*: GLenum = GLenum(0x882B)
  GL_DRAW_BUFFER7*: GLenum = GLenum(0x882C)
  GL_DRAW_BUFFER8*: GLenum = GLenum(0x882D)
  GL_DRAW_BUFFER9*: GLenum = GLenum(0x882E)
  GL_DRAW_BUFFER10*: GLenum = GLenum(0x882F)
  GL_DRAW_BUFFER11*: GLenum = GLenum(0x8830)
  GL_DRAW_BUFFER12*: GLenum = GLenum(0x8831)
  GL_DRAW_BUFFER13*: GLenum = GLenum(0x8832)
  GL_DRAW_BUFFER14*: GLenum = GLenum(0x8833)
  GL_DRAW_BUFFER15*: GLenum = GLenum(0x8834)
  GL_BLEND_EQUATION_ALPHA*: GLenum = GLenum(0x883D)
  GL_MAX_VERTEX_ATTRIBS*: GLenum = GLenum(0x8869)
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED*: GLenum = GLenum(0x886A)
  GL_MAX_TEXTURE_IMAGE_UNITS*: GLenum = GLenum(0x8872)
  GL_FRAGMENT_SHADER*: GLenum = GLenum(0x8B30)
  GL_VERTEX_SHADER*: GLenum = GLenum(0x8B31)
  GL_MAX_FRAGMENT_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8B49)
  GL_MAX_VERTEX_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8B4A)
  GL_MAX_VARYING_FLOATS*: GLenum = GLenum(0x8B4B)
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS*: GLenum = GLenum(0x8B4C)
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS*: GLenum = GLenum(0x8B4D)
  GL_SHADER_TYPE*: GLenum = GLenum(0x8B4F)
  GL_FLOAT_VEC2*: GLenum = GLenum(0x8B50)
  GL_FLOAT_VEC3*: GLenum = GLenum(0x8B51)
  GL_FLOAT_VEC4*: GLenum = GLenum(0x8B52)
  GL_INT_VEC2*: GLenum = GLenum(0x8B53)
  GL_INT_VEC3*: GLenum = GLenum(0x8B54)
  GL_INT_VEC4*: GLenum = GLenum(0x8B55)
  GL_BOOL*: GLenum = GLenum(0x8B56)
  GL_BOOL_VEC2*: GLenum = GLenum(0x8B57)
  GL_BOOL_VEC3*: GLenum = GLenum(0x8B58)
  GL_BOOL_VEC4*: GLenum = GLenum(0x8B59)
  GL_FLOAT_MAT2*: GLenum = GLenum(0x8B5A)
  GL_FLOAT_MAT3*: GLenum = GLenum(0x8B5B)
  GL_FLOAT_MAT4*: GLenum = GLenum(0x8B5C)
  GL_SAMPLER_1D*: GLenum = GLenum(0x8B5D)
  GL_SAMPLER_2D*: GLenum = GLenum(0x8B5E)
  GL_SAMPLER_3D*: GLenum = GLenum(0x8B5F)
  GL_SAMPLER_CUBE*: GLenum = GLenum(0x8B60)
  GL_SAMPLER_1D_SHADOW*: GLenum = GLenum(0x8B61)
  GL_SAMPLER_2D_SHADOW*: GLenum = GLenum(0x8B62)
  GL_DELETE_STATUS*: GLenum = GLenum(0x8B80)
  GL_COMPILE_STATUS*: GLenum = GLenum(0x8B81)
  GL_LINK_STATUS*: GLenum = GLenum(0x8B82)
  GL_VALIDATE_STATUS*: GLenum = GLenum(0x8B83)
  GL_INFO_LOG_LENGTH*: GLenum = GLenum(0x8B84)
  GL_ATTACHED_SHADERS*: GLenum = GLenum(0x8B85)
  GL_ACTIVE_UNIFORMS*: GLenum = GLenum(0x8B86)
  GL_ACTIVE_UNIFORM_MAX_LENGTH*: GLenum = GLenum(0x8B87)
  GL_SHADER_SOURCE_LENGTH*: GLenum = GLenum(0x8B88)
  GL_ACTIVE_ATTRIBUTES*: GLenum = GLenum(0x8B89)
  GL_ACTIVE_ATTRIBUTE_MAX_LENGTH*: GLenum = GLenum(0x8B8A)
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT*: GLenum = GLenum(0x8B8B)
  GL_SHADING_LANGUAGE_VERSION*: GLenum = GLenum(0x8B8C)
  GL_CURRENT_PROGRAM*: GLenum = GLenum(0x8B8D)
  GL_POINT_SPRITE_COORD_ORIGIN*: GLenum = GLenum(0x8CA0)
  GL_LOWER_LEFT*: GLenum = GLenum(0x8CA1)
  GL_UPPER_LEFT*: GLenum = GLenum(0x8CA2)
  GL_STENCIL_BACK_REF*: GLenum = GLenum(0x8CA3)
  GL_STENCIL_BACK_VALUE_MASK*: GLenum = GLenum(0x8CA4)
  GL_STENCIL_BACK_WRITEMASK*: GLenum = GLenum(0x8CA5)
  GL_PIXEL_PACK_BUFFER*: GLenum = GLenum(0x88EB)
  GL_PIXEL_UNPACK_BUFFER*: GLenum = GLenum(0x88EC)
  GL_PIXEL_PACK_BUFFER_BINDING*: GLenum = GLenum(0x88ED)
  GL_PIXEL_UNPACK_BUFFER_BINDING*: GLenum = GLenum(0x88EF)
  GL_FLOAT_MAT2x3*: GLenum = GLenum(0x8B65)
  GL_FLOAT_MAT2x4*: GLenum = GLenum(0x8B66)
  GL_FLOAT_MAT3x2*: GLenum = GLenum(0x8B67)
  GL_FLOAT_MAT3x4*: GLenum = GLenum(0x8B68)
  GL_FLOAT_MAT4x2*: GLenum = GLenum(0x8B69)
  GL_FLOAT_MAT4x3*: GLenum = GLenum(0x8B6A)
  GL_SRGB*: GLenum = GLenum(0x8C40)
  GL_SRGB8*: GLenum = GLenum(0x8C41)
  GL_SRGB_ALPHA*: GLenum = GLenum(0x8C42)
  GL_SRGB8_ALPHA8*: GLenum = GLenum(0x8C43)
  GL_COMPRESSED_SRGB*: GLenum = GLenum(0x8C48)
  GL_COMPRESSED_SRGB_ALPHA*: GLenum = GLenum(0x8C49)
  GL_COMPARE_REF_TO_TEXTURE*: GLenum = GLenum(0x884E)
  GL_CLIP_DISTANCE0*: GLenum = GLenum(0x3000)
  GL_CLIP_DISTANCE1*: GLenum = GLenum(0x3001)
  GL_CLIP_DISTANCE2*: GLenum = GLenum(0x3002)
  GL_CLIP_DISTANCE3*: GLenum = GLenum(0x3003)
  GL_CLIP_DISTANCE4*: GLenum = GLenum(0x3004)
  GL_CLIP_DISTANCE5*: GLenum = GLenum(0x3005)
  GL_CLIP_DISTANCE6*: GLenum = GLenum(0x3006)
  GL_CLIP_DISTANCE7*: GLenum = GLenum(0x3007)
  GL_MAX_CLIP_DISTANCES*: GLenum = GLenum(0x0D32)
  GL_MAJOR_VERSION*: GLenum = GLenum(0x821B)
  GL_MINOR_VERSION*: GLenum = GLenum(0x821C)
  GL_NUM_EXTENSIONS*: GLenum = GLenum(0x821D)
  GL_CONTEXT_FLAGS*: GLenum = GLenum(0x821E)
  GL_COMPRESSED_RED*: GLenum = GLenum(0x8225)
  GL_COMPRESSED_RG*: GLenum = GLenum(0x8226)
  GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT*: GLenum = GLenum(0x00000001)
  GL_RGBA32F*: GLenum = GLenum(0x8814)
  GL_RGB32F*: GLenum = GLenum(0x8815)
  GL_RGBA16F*: GLenum = GLenum(0x881A)
  GL_RGB16F*: GLenum = GLenum(0x881B)
  GL_VERTEX_ATTRIB_ARRAY_INTEGER*: GLenum = GLenum(0x88FD)
  GL_MAX_ARRAY_TEXTURE_LAYERS*: GLenum = GLenum(0x88FF)
  GL_MIN_PROGRAM_TEXEL_OFFSET*: GLenum = GLenum(0x8904)
  GL_MAX_PROGRAM_TEXEL_OFFSET*: GLenum = GLenum(0x8905)
  GL_CLAMP_READ_COLOR*: GLenum = GLenum(0x891C)
  GL_FIXED_ONLY*: GLenum = GLenum(0x891D)
  GL_MAX_VARYING_COMPONENTS*: GLenum = GLenum(0x8B4B)
  GL_TEXTURE_1D_ARRAY*: GLenum = GLenum(0x8C18)
  GL_PROXY_TEXTURE_1D_ARRAY*: GLenum = GLenum(0x8C19)
  GL_TEXTURE_2D_ARRAY*: GLenum = GLenum(0x8C1A)
  GL_PROXY_TEXTURE_2D_ARRAY*: GLenum = GLenum(0x8C1B)
  GL_TEXTURE_BINDING_1D_ARRAY*: GLenum = GLenum(0x8C1C)
  GL_TEXTURE_BINDING_2D_ARRAY*: GLenum = GLenum(0x8C1D)
  GL_R11F_G11F_B10F*: GLenum = GLenum(0x8C3A)
  GL_UNSIGNED_INT_10F_11F_11F_REV*: GLenum = GLenum(0x8C3B)
  GL_RGB9_E5*: GLenum = GLenum(0x8C3D)
  GL_UNSIGNED_INT_5_9_9_9_REV*: GLenum = GLenum(0x8C3E)
  GL_TEXTURE_SHARED_SIZE*: GLenum = GLenum(0x8C3F)
  GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH*: GLenum = GLenum(0x8C76)
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE*: GLenum = GLenum(0x8C7F)
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS*: GLenum = GLenum(0x8C80)
  GL_TRANSFORM_FEEDBACK_VARYINGS*: GLenum = GLenum(0x8C83)
  GL_TRANSFORM_FEEDBACK_BUFFER_START*: GLenum = GLenum(0x8C84)
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE*: GLenum = GLenum(0x8C85)
  GL_PRIMITIVES_GENERATED*: GLenum = GLenum(0x8C87)
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN*: GLenum = GLenum(0x8C88)
  GL_RASTERIZER_DISCARD*: GLenum = GLenum(0x8C89)
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS*: GLenum = GLenum(0x8C8A)
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS*: GLenum = GLenum(0x8C8B)
  GL_INTERLEAVED_ATTRIBS*: GLenum = GLenum(0x8C8C)
  GL_SEPARATE_ATTRIBS*: GLenum = GLenum(0x8C8D)
  GL_TRANSFORM_FEEDBACK_BUFFER*: GLenum = GLenum(0x8C8E)
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING*: GLenum = GLenum(0x8C8F)
  GL_RGBA32UI*: GLenum = GLenum(0x8D70)
  GL_RGB32UI*: GLenum = GLenum(0x8D71)
  GL_RGBA16UI*: GLenum = GLenum(0x8D76)
  GL_RGB16UI*: GLenum = GLenum(0x8D77)
  GL_RGBA8UI*: GLenum = GLenum(0x8D7C)
  GL_RGB8UI*: GLenum = GLenum(0x8D7D)
  GL_RGBA32I*: GLenum = GLenum(0x8D82)
  GL_RGB32I*: GLenum = GLenum(0x8D83)
  GL_RGBA16I*: GLenum = GLenum(0x8D88)
  GL_RGB16I*: GLenum = GLenum(0x8D89)
  GL_RGBA8I*: GLenum = GLenum(0x8D8E)
  GL_RGB8I*: GLenum = GLenum(0x8D8F)
  GL_RED_INTEGER*: GLenum = GLenum(0x8D94)
  GL_GREEN_INTEGER*: GLenum = GLenum(0x8D95)
  GL_BLUE_INTEGER*: GLenum = GLenum(0x8D96)
  GL_RGB_INTEGER*: GLenum = GLenum(0x8D98)
  GL_RGBA_INTEGER*: GLenum = GLenum(0x8D99)
  GL_BGR_INTEGER*: GLenum = GLenum(0x8D9A)
  GL_BGRA_INTEGER*: GLenum = GLenum(0x8D9B)
  GL_SAMPLER_1D_ARRAY*: GLenum = GLenum(0x8DC0)
  GL_SAMPLER_2D_ARRAY*: GLenum = GLenum(0x8DC1)
  GL_SAMPLER_1D_ARRAY_SHADOW*: GLenum = GLenum(0x8DC3)
  GL_SAMPLER_2D_ARRAY_SHADOW*: GLenum = GLenum(0x8DC4)
  GL_SAMPLER_CUBE_SHADOW*: GLenum = GLenum(0x8DC5)
  GL_UNSIGNED_INT_VEC2*: GLenum = GLenum(0x8DC6)
  GL_UNSIGNED_INT_VEC3*: GLenum = GLenum(0x8DC7)
  GL_UNSIGNED_INT_VEC4*: GLenum = GLenum(0x8DC8)
  GL_INT_SAMPLER_1D*: GLenum = GLenum(0x8DC9)
  GL_INT_SAMPLER_2D*: GLenum = GLenum(0x8DCA)
  GL_INT_SAMPLER_3D*: GLenum = GLenum(0x8DCB)
  GL_INT_SAMPLER_CUBE*: GLenum = GLenum(0x8DCC)
  GL_INT_SAMPLER_1D_ARRAY*: GLenum = GLenum(0x8DCE)
  GL_INT_SAMPLER_2D_ARRAY*: GLenum = GLenum(0x8DCF)
  GL_UNSIGNED_INT_SAMPLER_1D*: GLenum = GLenum(0x8DD1)
  GL_UNSIGNED_INT_SAMPLER_2D*: GLenum = GLenum(0x8DD2)
  GL_UNSIGNED_INT_SAMPLER_3D*: GLenum = GLenum(0x8DD3)
  GL_UNSIGNED_INT_SAMPLER_CUBE*: GLenum = GLenum(0x8DD4)
  GL_UNSIGNED_INT_SAMPLER_1D_ARRAY*: GLenum = GLenum(0x8DD6)
  GL_UNSIGNED_INT_SAMPLER_2D_ARRAY*: GLenum = GLenum(0x8DD7)
  GL_QUERY_WAIT*: GLenum = GLenum(0x8E13)
  GL_QUERY_NO_WAIT*: GLenum = GLenum(0x8E14)
  GL_QUERY_BY_REGION_WAIT*: GLenum = GLenum(0x8E15)
  GL_QUERY_BY_REGION_NO_WAIT*: GLenum = GLenum(0x8E16)
  GL_BUFFER_ACCESS_FLAGS*: GLenum = GLenum(0x911F)
  GL_BUFFER_MAP_LENGTH*: GLenum = GLenum(0x9120)
  GL_BUFFER_MAP_OFFSET*: GLenum = GLenum(0x9121)
  GL_DEPTH_COMPONENT32F*: GLenum = GLenum(0x8CAC)
  GL_DEPTH32F_STENCIL8*: GLenum = GLenum(0x8CAD)
  GL_FLOAT_32_UNSIGNED_INT_24_8_REV*: GLenum = GLenum(0x8DAD)
  GL_INVALID_FRAMEBUFFER_OPERATION*: GLenum = GLenum(0x0506)
  GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING*: GLenum = GLenum(0x8210)
  GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE*: GLenum = GLenum(0x8211)
  GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE*: GLenum = GLenum(0x8212)
  GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE*: GLenum = GLenum(0x8213)
  GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE*: GLenum = GLenum(0x8214)
  GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE*: GLenum = GLenum(0x8215)
  GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE*: GLenum = GLenum(0x8216)
  GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE*: GLenum = GLenum(0x8217)
  GL_FRAMEBUFFER_DEFAULT*: GLenum = GLenum(0x8218)
  GL_FRAMEBUFFER_UNDEFINED*: GLenum = GLenum(0x8219)
  GL_DEPTH_STENCIL_ATTACHMENT*: GLenum = GLenum(0x821A)
  GL_MAX_RENDERBUFFER_SIZE*: GLenum = GLenum(0x84E8)
  GL_DEPTH_STENCIL*: GLenum = GLenum(0x84F9)
  GL_UNSIGNED_INT_24_8*: GLenum = GLenum(0x84FA)
  GL_DEPTH24_STENCIL8*: GLenum = GLenum(0x88F0)
  GL_TEXTURE_STENCIL_SIZE*: GLenum = GLenum(0x88F1)
  GL_TEXTURE_RED_TYPE*: GLenum = GLenum(0x8C10)
  GL_TEXTURE_GREEN_TYPE*: GLenum = GLenum(0x8C11)
  GL_TEXTURE_BLUE_TYPE*: GLenum = GLenum(0x8C12)
  GL_TEXTURE_ALPHA_TYPE*: GLenum = GLenum(0x8C13)
  GL_TEXTURE_DEPTH_TYPE*: GLenum = GLenum(0x8C16)
  GL_UNSIGNED_NORMALIZED*: GLenum = GLenum(0x8C17)
  GL_FRAMEBUFFER_BINDING*: GLenum = GLenum(0x8CA6)
  GL_DRAW_FRAMEBUFFER_BINDING*: GLenum = GLenum(0x8CA6)
  GL_RENDERBUFFER_BINDING*: GLenum = GLenum(0x8CA7)
  GL_READ_FRAMEBUFFER*: GLenum = GLenum(0x8CA8)
  GL_DRAW_FRAMEBUFFER*: GLenum = GLenum(0x8CA9)
  GL_READ_FRAMEBUFFER_BINDING*: GLenum = GLenum(0x8CAA)
  GL_RENDERBUFFER_SAMPLES*: GLenum = GLenum(0x8CAB)
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE*: GLenum = GLenum(0x8CD0)
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME*: GLenum = GLenum(0x8CD1)
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL*: GLenum = GLenum(0x8CD2)
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE*: GLenum = GLenum(0x8CD3)
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER*: GLenum = GLenum(0x8CD4)
  GL_FRAMEBUFFER_COMPLETE*: GLenum = GLenum(0x8CD5)
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT*: GLenum = GLenum(0x8CD6)
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT*: GLenum = GLenum(0x8CD7)
  GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER*: GLenum = GLenum(0x8CDB)
  GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER*: GLenum = GLenum(0x8CDC)
  GL_FRAMEBUFFER_UNSUPPORTED*: GLenum = GLenum(0x8CDD)
  GL_MAX_COLOR_ATTACHMENTS*: GLenum = GLenum(0x8CDF)
  GL_COLOR_ATTACHMENT0*: GLenum = GLenum(0x8CE0)
  GL_COLOR_ATTACHMENT1*: GLenum = GLenum(0x8CE1)
  GL_COLOR_ATTACHMENT2*: GLenum = GLenum(0x8CE2)
  GL_COLOR_ATTACHMENT3*: GLenum = GLenum(0x8CE3)
  GL_COLOR_ATTACHMENT4*: GLenum = GLenum(0x8CE4)
  GL_COLOR_ATTACHMENT5*: GLenum = GLenum(0x8CE5)
  GL_COLOR_ATTACHMENT6*: GLenum = GLenum(0x8CE6)
  GL_COLOR_ATTACHMENT7*: GLenum = GLenum(0x8CE7)
  GL_COLOR_ATTACHMENT8*: GLenum = GLenum(0x8CE8)
  GL_COLOR_ATTACHMENT9*: GLenum = GLenum(0x8CE9)
  GL_COLOR_ATTACHMENT10*: GLenum = GLenum(0x8CEA)
  GL_COLOR_ATTACHMENT11*: GLenum = GLenum(0x8CEB)
  GL_COLOR_ATTACHMENT12*: GLenum = GLenum(0x8CEC)
  GL_COLOR_ATTACHMENT13*: GLenum = GLenum(0x8CED)
  GL_COLOR_ATTACHMENT14*: GLenum = GLenum(0x8CEE)
  GL_COLOR_ATTACHMENT15*: GLenum = GLenum(0x8CEF)
  GL_COLOR_ATTACHMENT16*: GLenum = GLenum(0x8CF0)
  GL_COLOR_ATTACHMENT17*: GLenum = GLenum(0x8CF1)
  GL_COLOR_ATTACHMENT18*: GLenum = GLenum(0x8CF2)
  GL_COLOR_ATTACHMENT19*: GLenum = GLenum(0x8CF3)
  GL_COLOR_ATTACHMENT20*: GLenum = GLenum(0x8CF4)
  GL_COLOR_ATTACHMENT21*: GLenum = GLenum(0x8CF5)
  GL_COLOR_ATTACHMENT22*: GLenum = GLenum(0x8CF6)
  GL_COLOR_ATTACHMENT23*: GLenum = GLenum(0x8CF7)
  GL_COLOR_ATTACHMENT24*: GLenum = GLenum(0x8CF8)
  GL_COLOR_ATTACHMENT25*: GLenum = GLenum(0x8CF9)
  GL_COLOR_ATTACHMENT26*: GLenum = GLenum(0x8CFA)
  GL_COLOR_ATTACHMENT27*: GLenum = GLenum(0x8CFB)
  GL_COLOR_ATTACHMENT28*: GLenum = GLenum(0x8CFC)
  GL_COLOR_ATTACHMENT29*: GLenum = GLenum(0x8CFD)
  GL_COLOR_ATTACHMENT30*: GLenum = GLenum(0x8CFE)
  GL_COLOR_ATTACHMENT31*: GLenum = GLenum(0x8CFF)
  GL_DEPTH_ATTACHMENT*: GLenum = GLenum(0x8D00)
  GL_STENCIL_ATTACHMENT*: GLenum = GLenum(0x8D20)
  GL_FRAMEBUFFER*: GLenum = GLenum(0x8D40)
  GL_RENDERBUFFER*: GLenum = GLenum(0x8D41)
  GL_RENDERBUFFER_WIDTH*: GLenum = GLenum(0x8D42)
  GL_RENDERBUFFER_HEIGHT*: GLenum = GLenum(0x8D43)
  GL_RENDERBUFFER_INTERNAL_FORMAT*: GLenum = GLenum(0x8D44)
  GL_STENCIL_INDEX1*: GLenum = GLenum(0x8D46)
  GL_STENCIL_INDEX4*: GLenum = GLenum(0x8D47)
  GL_STENCIL_INDEX8*: GLenum = GLenum(0x8D48)
  GL_STENCIL_INDEX16*: GLenum = GLenum(0x8D49)
  GL_RENDERBUFFER_RED_SIZE*: GLenum = GLenum(0x8D50)
  GL_RENDERBUFFER_GREEN_SIZE*: GLenum = GLenum(0x8D51)
  GL_RENDERBUFFER_BLUE_SIZE*: GLenum = GLenum(0x8D52)
  GL_RENDERBUFFER_ALPHA_SIZE*: GLenum = GLenum(0x8D53)
  GL_RENDERBUFFER_DEPTH_SIZE*: GLenum = GLenum(0x8D54)
  GL_RENDERBUFFER_STENCIL_SIZE*: GLenum = GLenum(0x8D55)
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE*: GLenum = GLenum(0x8D56)
  GL_MAX_SAMPLES*: GLenum = GLenum(0x8D57)
  GL_FRAMEBUFFER_SRGB*: GLenum = GLenum(0x8DB9)
  GL_HALF_FLOAT*: GLenum = GLenum(0x140B)
  GL_MAP_READ_BIT*: GLenum = GLenum(0x0001)
  GL_MAP_WRITE_BIT*: GLenum = GLenum(0x0002)
  GL_MAP_INVALIDATE_RANGE_BIT*: GLenum = GLenum(0x0004)
  GL_MAP_INVALIDATE_BUFFER_BIT*: GLenum = GLenum(0x0008)
  GL_MAP_FLUSH_EXPLICIT_BIT*: GLenum = GLenum(0x0010)
  GL_MAP_UNSYNCHRONIZED_BIT*: GLenum = GLenum(0x0020)
  GL_COMPRESSED_RED_RGTC1*: GLenum = GLenum(0x8DBB)
  GL_COMPRESSED_SIGNED_RED_RGTC1*: GLenum = GLenum(0x8DBC)
  GL_COMPRESSED_RG_RGTC2*: GLenum = GLenum(0x8DBD)
  GL_COMPRESSED_SIGNED_RG_RGTC2*: GLenum = GLenum(0x8DBE)
  GL_RG*: GLenum = GLenum(0x8227)
  GL_RG_INTEGER*: GLenum = GLenum(0x8228)
  GL_R8*: GLenum = GLenum(0x8229)
  GL_R16*: GLenum = GLenum(0x822A)
  GL_RG8*: GLenum = GLenum(0x822B)
  GL_RG16*: GLenum = GLenum(0x822C)
  GL_R16F*: GLenum = GLenum(0x822D)
  GL_R32F*: GLenum = GLenum(0x822E)
  GL_RG16F*: GLenum = GLenum(0x822F)
  GL_RG32F*: GLenum = GLenum(0x8230)
  GL_R8I*: GLenum = GLenum(0x8231)
  GL_R8UI*: GLenum = GLenum(0x8232)
  GL_R16I*: GLenum = GLenum(0x8233)
  GL_R16UI*: GLenum = GLenum(0x8234)
  GL_R32I*: GLenum = GLenum(0x8235)
  GL_R32UI*: GLenum = GLenum(0x8236)
  GL_RG8I*: GLenum = GLenum(0x8237)
  GL_RG8UI*: GLenum = GLenum(0x8238)
  GL_RG16I*: GLenum = GLenum(0x8239)
  GL_RG16UI*: GLenum = GLenum(0x823A)
  GL_RG32I*: GLenum = GLenum(0x823B)
  GL_RG32UI*: GLenum = GLenum(0x823C)
  GL_VERTEX_ARRAY_BINDING*: GLenum = GLenum(0x85B5)
  GL_SAMPLER_2D_RECT*: GLenum = GLenum(0x8B63)
  GL_SAMPLER_2D_RECT_SHADOW*: GLenum = GLenum(0x8B64)
  GL_SAMPLER_BUFFER*: GLenum = GLenum(0x8DC2)
  GL_INT_SAMPLER_2D_RECT*: GLenum = GLenum(0x8DCD)
  GL_INT_SAMPLER_BUFFER*: GLenum = GLenum(0x8DD0)
  GL_UNSIGNED_INT_SAMPLER_2D_RECT*: GLenum = GLenum(0x8DD5)
  GL_UNSIGNED_INT_SAMPLER_BUFFER*: GLenum = GLenum(0x8DD8)
  GL_TEXTURE_BUFFER*: GLenum = GLenum(0x8C2A)
  GL_MAX_TEXTURE_BUFFER_SIZE*: GLenum = GLenum(0x8C2B)
  GL_TEXTURE_BINDING_BUFFER*: GLenum = GLenum(0x8C2C)
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING*: GLenum = GLenum(0x8C2D)
  GL_TEXTURE_RECTANGLE*: GLenum = GLenum(0x84F5)
  GL_TEXTURE_BINDING_RECTANGLE*: GLenum = GLenum(0x84F6)
  GL_PROXY_TEXTURE_RECTANGLE*: GLenum = GLenum(0x84F7)
  GL_MAX_RECTANGLE_TEXTURE_SIZE*: GLenum = GLenum(0x84F8)
  GL_R8_SNORM*: GLenum = GLenum(0x8F94)
  GL_RG8_SNORM*: GLenum = GLenum(0x8F95)
  GL_RGB8_SNORM*: GLenum = GLenum(0x8F96)
  GL_RGBA8_SNORM*: GLenum = GLenum(0x8F97)
  GL_R16_SNORM*: GLenum = GLenum(0x8F98)
  GL_RG16_SNORM*: GLenum = GLenum(0x8F99)
  GL_RGB16_SNORM*: GLenum = GLenum(0x8F9A)
  GL_RGBA16_SNORM*: GLenum = GLenum(0x8F9B)
  GL_SIGNED_NORMALIZED*: GLenum = GLenum(0x8F9C)
  GL_PRIMITIVE_RESTART*: GLenum = GLenum(0x8F9D)
  GL_PRIMITIVE_RESTART_INDEX*: GLenum = GLenum(0x8F9E)
  GL_COPY_READ_BUFFER*: GLenum = GLenum(0x8F36)
  GL_COPY_WRITE_BUFFER*: GLenum = GLenum(0x8F37)
  GL_UNIFORM_BUFFER*: GLenum = GLenum(0x8A11)
  GL_UNIFORM_BUFFER_BINDING*: GLenum = GLenum(0x8A28)
  GL_UNIFORM_BUFFER_START*: GLenum = GLenum(0x8A29)
  GL_UNIFORM_BUFFER_SIZE*: GLenum = GLenum(0x8A2A)
  GL_MAX_VERTEX_UNIFORM_BLOCKS*: GLenum = GLenum(0x8A2B)
  GL_MAX_GEOMETRY_UNIFORM_BLOCKS*: GLenum = GLenum(0x8A2C)
  GL_MAX_FRAGMENT_UNIFORM_BLOCKS*: GLenum = GLenum(0x8A2D)
  GL_MAX_COMBINED_UNIFORM_BLOCKS*: GLenum = GLenum(0x8A2E)
  GL_MAX_UNIFORM_BUFFER_BINDINGS*: GLenum = GLenum(0x8A2F)
  GL_MAX_UNIFORM_BLOCK_SIZE*: GLenum = GLenum(0x8A30)
  GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8A31)
  GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8A32)
  GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8A33)
  GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT*: GLenum = GLenum(0x8A34)
  GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH*: GLenum = GLenum(0x8A35)
  GL_ACTIVE_UNIFORM_BLOCKS*: GLenum = GLenum(0x8A36)
  GL_UNIFORM_TYPE*: GLenum = GLenum(0x8A37)
  GL_UNIFORM_SIZE*: GLenum = GLenum(0x8A38)
  GL_UNIFORM_NAME_LENGTH*: GLenum = GLenum(0x8A39)
  GL_UNIFORM_BLOCK_INDEX*: GLenum = GLenum(0x8A3A)
  GL_UNIFORM_OFFSET*: GLenum = GLenum(0x8A3B)
  GL_UNIFORM_ARRAY_STRIDE*: GLenum = GLenum(0x8A3C)
  GL_UNIFORM_MATRIX_STRIDE*: GLenum = GLenum(0x8A3D)
  GL_UNIFORM_IS_ROW_MAJOR*: GLenum = GLenum(0x8A3E)
  GL_UNIFORM_BLOCK_BINDING*: GLenum = GLenum(0x8A3F)
  GL_UNIFORM_BLOCK_DATA_SIZE*: GLenum = GLenum(0x8A40)
  GL_UNIFORM_BLOCK_NAME_LENGTH*: GLenum = GLenum(0x8A41)
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS*: GLenum = GLenum(0x8A42)
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES*: GLenum = GLenum(0x8A43)
  GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER*: GLenum = GLenum(0x8A44)
  GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER*: GLenum = GLenum(0x8A45)
  GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER*: GLenum = GLenum(0x8A46)
  GL_CONTEXT_CORE_PROFILE_BIT*: GLenum = GLenum(0x00000001)
  GL_CONTEXT_COMPATIBILITY_PROFILE_BIT*: GLenum = GLenum(0x00000002)
  GL_LINES_ADJACENCY*: GLenum = GLenum(0x000A)
  GL_LINE_STRIP_ADJACENCY*: GLenum = GLenum(0x000B)
  GL_TRIANGLES_ADJACENCY*: GLenum = GLenum(0x000C)
  GL_TRIANGLE_STRIP_ADJACENCY*: GLenum = GLenum(0x000D)
  GL_PROGRAM_POINT_SIZE*: GLenum = GLenum(0x8642)
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS*: GLenum = GLenum(0x8C29)
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED*: GLenum = GLenum(0x8DA7)
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS*: GLenum = GLenum(0x8DA8)
  GL_GEOMETRY_SHADER*: GLenum = GLenum(0x8DD9)
  GL_GEOMETRY_VERTICES_OUT*: GLenum = GLenum(0x8916)
  GL_GEOMETRY_INPUT_TYPE*: GLenum = GLenum(0x8917)
  GL_GEOMETRY_OUTPUT_TYPE*: GLenum = GLenum(0x8918)
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS*: GLenum = GLenum(0x8DDF)
  GL_MAX_GEOMETRY_OUTPUT_VERTICES*: GLenum = GLenum(0x8DE0)
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS*: GLenum = GLenum(0x8DE1)
  GL_MAX_VERTEX_OUTPUT_COMPONENTS*: GLenum = GLenum(0x9122)
  GL_MAX_GEOMETRY_INPUT_COMPONENTS*: GLenum = GLenum(0x9123)
  GL_MAX_GEOMETRY_OUTPUT_COMPONENTS*: GLenum = GLenum(0x9124)
  GL_MAX_FRAGMENT_INPUT_COMPONENTS*: GLenum = GLenum(0x9125)
  GL_CONTEXT_PROFILE_MASK*: GLenum = GLenum(0x9126)
  GL_DEPTH_CLAMP*: GLenum = GLenum(0x864F)
  GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION*: GLenum = GLenum(0x8E4C)
  GL_FIRST_VERTEX_CONVENTION*: GLenum = GLenum(0x8E4D)
  GL_LAST_VERTEX_CONVENTION*: GLenum = GLenum(0x8E4E)
  GL_PROVOKING_VERTEX*: GLenum = GLenum(0x8E4F)
  GL_TEXTURE_CUBE_MAP_SEAMLESS*: GLenum = GLenum(0x884F)
  GL_MAX_SERVER_WAIT_TIMEOUT*: GLenum = GLenum(0x9111)
  GL_OBJECT_TYPE*: GLenum = GLenum(0x9112)
  GL_SYNC_CONDITION*: GLenum = GLenum(0x9113)
  GL_SYNC_STATUS*: GLenum = GLenum(0x9114)
  GL_SYNC_FLAGS*: GLenum = GLenum(0x9115)
  GL_SYNC_FENCE*: GLenum = GLenum(0x9116)
  GL_SYNC_GPU_COMMANDS_COMPLETE*: GLenum = GLenum(0x9117)
  GL_UNSIGNALED*: GLenum = GLenum(0x9118)
  GL_SIGNALED*: GLenum = GLenum(0x9119)
  GL_ALREADY_SIGNALED*: GLenum = GLenum(0x911A)
  GL_TIMEOUT_EXPIRED*: GLenum = GLenum(0x911B)
  GL_CONDITION_SATISFIED*: GLenum = GLenum(0x911C)
  GL_WAIT_FAILED*: GLenum = GLenum(0x911D)
  GL_SYNC_FLUSH_COMMANDS_BIT*: GLenum = GLenum(0x00000001)
  GL_SAMPLE_POSITION*: GLenum = GLenum(0x8E50)
  GL_SAMPLE_MASK*: GLenum = GLenum(0x8E51)
  GL_SAMPLE_MASK_VALUE*: GLenum = GLenum(0x8E52)
  GL_MAX_SAMPLE_MASK_WORDS*: GLenum = GLenum(0x8E59)
  GL_TEXTURE_2D_MULTISAMPLE*: GLenum = GLenum(0x9100)
  GL_PROXY_TEXTURE_2D_MULTISAMPLE*: GLenum = GLenum(0x9101)
  GL_TEXTURE_2D_MULTISAMPLE_ARRAY*: GLenum = GLenum(0x9102)
  GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY*: GLenum = GLenum(0x9103)
  GL_TEXTURE_BINDING_2D_MULTISAMPLE*: GLenum = GLenum(0x9104)
  GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY*: GLenum = GLenum(0x9105)
  GL_TEXTURE_SAMPLES*: GLenum = GLenum(0x9106)
  GL_TEXTURE_FIXED_SAMPLE_LOCATIONS*: GLenum = GLenum(0x9107)
  GL_SAMPLER_2D_MULTISAMPLE*: GLenum = GLenum(0x9108)
  GL_INT_SAMPLER_2D_MULTISAMPLE*: GLenum = GLenum(0x9109)
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE*: GLenum = GLenum(0x910A)
  GL_SAMPLER_2D_MULTISAMPLE_ARRAY*: GLenum = GLenum(0x910B)
  GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY*: GLenum = GLenum(0x910C)
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY*: GLenum = GLenum(0x910D)
  GL_MAX_COLOR_TEXTURE_SAMPLES*: GLenum = GLenum(0x910E)
  GL_MAX_DEPTH_TEXTURE_SAMPLES*: GLenum = GLenum(0x910F)
  GL_MAX_INTEGER_SAMPLES*: GLenum = GLenum(0x9110)
  # OpenGL 3.3 Pixel SWIZZLE
  GL_TEXTURE_SWIZZLE_R*: GLenum = GLenum(0x8E42)
  GL_TEXTURE_SWIZZLE_G*: GLenum = GLenum(0x8E43)
  GL_TEXTURE_SWIZZLE_B*: GLenum = GLenum(0x8E44)
  GL_TEXTURE_SWIZZLE_A*: GLenum = GLenum(0x8E45)

# Functions
var
  GLAD_GL_VERSION_1_0*: bool
  GLAD_GL_VERSION_1_1*: bool
  GLAD_GL_VERSION_1_2*: bool
  GLAD_GL_VERSION_1_3*: bool
  GLAD_GL_VERSION_1_4*: bool
  GLAD_GL_VERSION_1_5*: bool
  GLAD_GL_VERSION_2_0*: bool
  GLAD_GL_VERSION_2_1*: bool
  GLAD_GL_VERSION_3_0*: bool
  GLAD_GL_VERSION_3_1*: bool
  GLAD_GL_VERSION_3_2*: bool

  glCullFace*: proc (mode: GLenum) {.cdecl.}
  glFrontFace*: proc (mode: GLenum) {.cdecl.}
  glHint*: proc (target: GLenum, mode: GLenum) {.cdecl.}
  glLineWidth*: proc (width: GLfloat) {.cdecl.}
  glPointSize*: proc (size: GLfloat) {.cdecl.}
  glPolygonMode*: proc (face: GLenum, mode: GLenum) {.cdecl.}
  glScissor*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl.}
  glTexParameterf*: proc (target: GLenum, pname: GLenum, param: GLfloat) {.cdecl.}
  glTexParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl.}
  glTexParameteri*: proc (target: GLenum, pname: GLenum, param: GLint) {.cdecl.}
  glTexParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}
  glTexImage1D*: proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}
  glTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}
  glDrawBuffer*: proc (buf: GLenum) {.cdecl.}
  glClear*: proc (mask: GLbitfield) {.cdecl.}
  glClearColor*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl.}
  glClearStencil*: proc (s: GLint) {.cdecl.}
  glClearDepth*: proc (depth: GLdouble) {.cdecl.}
  glStencilMask*: proc (mask: GLuint) {.cdecl.}
  glColorMask*: proc (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) {.cdecl.}
  glDepthMask*: proc (flag: GLboolean) {.cdecl.}
  glDisable*: proc (cap: GLenum) {.cdecl.}
  glEnable*: proc (cap: GLenum) {.cdecl.}
  glFinish*: proc () {.cdecl.}
  glFlush*: proc () {.cdecl.}
  glBlendFunc*: proc (sfactor: GLenum, dfactor: GLenum) {.cdecl.}
  glLogicOp*: proc (opcode: GLenum) {.cdecl.}
  glStencilFunc*: proc (`func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl.}
  glStencilOp*: proc (fail: GLenum, zfail: GLenum, zpass: GLenum) {.cdecl.}
  glDepthFunc*: proc (`func`: GLenum) {.cdecl.}
  glPixelStoref*: proc (pname: GLenum, param: GLfloat) {.cdecl.}
  glPixelStorei*: proc (pname: GLenum, param: GLint) {.cdecl.}
  glReadBuffer*: proc (src: GLenum) {.cdecl.}
  glReadPixels*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}
  glGetBooleanv*: proc (pname: GLenum, data: ptr GLboolean) {.cdecl.}
  glGetDoublev*: proc (pname: GLenum, data: ptr GLdouble) {.cdecl.}
  glGetError*: proc (): GLenum {.cdecl.}
  glGetFloatv*: proc (pname: GLenum, data: ptr GLfloat) {.cdecl.}
  glGetIntegerv*: proc (pname: GLenum, data: ptr GLint) {.cdecl.}
  glGetString*: proc (name: GLenum): ptr GLubyte {.cdecl.}
  glGetTexImage*: proc (target: GLenum, level: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}
  glGetTexParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl.}
  glGetTexParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}
  glGetTexLevelParameterfv*: proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLfloat) {.cdecl.}
  glGetTexLevelParameteriv*: proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLint) {.cdecl.}
  glIsEnabled*: proc (cap: GLenum): GLboolean {.cdecl.}
  glDepthRange*: proc (n: GLdouble, f: GLdouble) {.cdecl.}
  glViewport*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl.}
  glDrawArrays*: proc (mode: GLenum, first: GLint, count: GLsizei) {.cdecl.}
  glDrawElements*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer) {.cdecl.}
  glPolygonOffset*: proc (factor: GLfloat, units: GLfloat) {.cdecl.}
  glCopyTexImage1D*: proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) {.cdecl.}
  glCopyTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.cdecl.}
  glCopyTexSubImage1D*: proc (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) {.cdecl.}
  glCopyTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl.}
  glTexSubImage1D*: proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}
  glTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}
  glBindTexture*: proc (target: GLenum, texture: GLuint) {.cdecl.}
  glDeleteTextures*: proc (n: GLsizei, textures: ptr GLuint) {.cdecl.}
  glGenTextures*: proc (n: GLsizei, textures: ptr GLuint) {.cdecl.}
  glIsTexture*: proc (texture: GLuint): GLboolean {.cdecl.}
  glDrawRangeElements*: proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer) {.cdecl.}
  glTexImage3D*: proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}
  glTexSubImage3D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}
  glCopyTexSubImage3D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl.}
  glActiveTexture*: proc (texture: GLenum) {.cdecl.}
  glSampleCoverage*: proc (value: GLfloat, invert: GLboolean) {.cdecl.}
  glCompressedTexImage3D*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl.}
  glCompressedTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl.}
  glCompressedTexImage1D*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl.}
  glCompressedTexSubImage3D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl.}
  glCompressedTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl.}
  glCompressedTexSubImage1D*: proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl.}
  glGetCompressedTexImage*: proc (target: GLenum, level: GLint, img: pointer) {.cdecl.}
  glBlendFuncSeparate*: proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) {.cdecl.}
  glMultiDrawArrays*: proc (mode: GLenum, first: ptr GLint, count: ptr GLsizei, drawcount: GLsizei) {.cdecl.}
  glMultiDrawElements*: proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei) {.cdecl.}
  glPointParameterf*: proc (pname: GLenum, param: GLfloat) {.cdecl.}
  glPointParameterfv*: proc (pname: GLenum, params: ptr GLfloat) {.cdecl.}
  glPointParameteri*: proc (pname: GLenum, param: GLint) {.cdecl.}
  glPointParameteriv*: proc (pname: GLenum, params: ptr GLint) {.cdecl.}
  glBlendColor*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl.}
  glBlendEquation*: proc (mode: GLenum) {.cdecl.}
  glGenQueries*: proc (n: GLsizei, ids: ptr GLuint) {.cdecl.}
  glDeleteQueries*: proc (n: GLsizei, ids: ptr GLuint) {.cdecl.}
  glIsQuery*: proc (id: GLuint): GLboolean {.cdecl.}
  glBeginQuery*: proc (target: GLenum, id: GLuint) {.cdecl.}
  glEndQuery*: proc (target: GLenum) {.cdecl.}
  glGetQueryiv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}
  glGetQueryObjectiv*: proc (id: GLuint, pname: GLenum, params: ptr GLint) {.cdecl.}
  glGetQueryObjectuiv*: proc (id: GLuint, pname: GLenum, params: ptr GLuint) {.cdecl.}
  glBindBuffer*: proc (target: GLenum, buffer: GLuint) {.cdecl.}
  glDeleteBuffers*: proc (n: GLsizei, buffers: ptr GLuint) {.cdecl.}
  glGenBuffers*: proc (n: GLsizei, buffers: ptr GLuint) {.cdecl.}
  glIsBuffer*: proc (buffer: GLuint): GLboolean {.cdecl.}
  glBufferData*: proc (target: GLenum, size: GLsizeiptr, data: pointer, usage: GLenum) {.cdecl.}
  glBufferSubData*: proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.cdecl.}
  glGetBufferSubData*: proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.cdecl.}
  glMapBuffer*: proc (target: GLenum, access: GLenum): pointer {.cdecl.}
  glUnmapBuffer*: proc (target: GLenum): GLboolean {.cdecl.}
  glGetBufferParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}
  glGetBufferPointerv*: proc (target: GLenum, pname: GLenum, params: ptr pointer) {.cdecl.}
  glBlendEquationSeparate*: proc (modeRGB: GLenum, modeAlpha: GLenum) {.cdecl.}
  glDrawBuffers*: proc (n: GLsizei, bufs: ptr GLenum) {.cdecl.}
  glStencilOpSeparate*: proc (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) {.cdecl.}
  glStencilFuncSeparate*: proc (face: GLenum, `func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl.}
  glStencilMaskSeparate*: proc (face: GLenum, mask: GLuint) {.cdecl.}
  glAttachShader*: proc (program: GLuint, shader: GLuint) {.cdecl.}
  glBindAttribLocation*: proc (program: GLuint, index: GLuint, name: cstring) {.cdecl.}
  glCompileShader*: proc (shader: GLuint) {.cdecl.}
  glCreateProgram*: proc (): GLuint {.cdecl.}
  glCreateShader*: proc (`type`: GLenum): GLuint {.cdecl.}
  glDeleteProgram*: proc (program: GLuint) {.cdecl.}
  glDeleteShader*: proc (shader: GLuint) {.cdecl.}
  glDetachShader*: proc (program: GLuint, shader: GLuint) {.cdecl.}
  glDisableVertexAttribArray*: proc (index: GLuint) {.cdecl.}
  glEnableVertexAttribArray*: proc (index: GLuint) {.cdecl.}
  glGetActiveAttrib*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl.}
  glGetActiveUniform*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl.}
  glGetAttachedShaders*: proc (program: GLuint, maxCount: GLsizei, count: ptr GLsizei, shaders: ptr GLuint) {.cdecl.}
  glGetAttribLocation*: proc (program: GLuint, name: cstring): GLint {.cdecl.}
  glGetProgramiv*: proc (program: GLuint, pname: GLenum, params: ptr GLint) {.cdecl.}
  glGetProgramInfoLog*: proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl.}
  glGetShaderiv*: proc (shader: GLuint, pname: GLenum, params: ptr GLint) {.cdecl.}
  glGetShaderInfoLog*: proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl.}
  glGetShaderSource*: proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, source: cstring) {.cdecl.}
  glGetUniformLocation*: proc (program: GLuint, name: cstring): GLint {.cdecl.}
  glGetUniformfv*: proc (program: GLuint, location: GLint, params: ptr GLfloat) {.cdecl.}
  glGetUniformiv*: proc (program: GLuint, location: GLint, params: ptr GLint) {.cdecl.}
  glGetVertexAttribdv*: proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.cdecl.}
  glGetVertexAttribfv*: proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.cdecl.}
  glGetVertexAttribiv*: proc (index: GLuint, pname: GLenum, params: ptr GLint) {.cdecl.}
  glGetVertexAttribPointerv*: proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.cdecl.}
  glIsProgram*: proc (program: GLuint): GLboolean {.cdecl.}
  glIsShader*: proc (shader: GLuint): GLboolean {.cdecl.}
  glLinkProgram*: proc (program: GLuint) {.cdecl.}
  glShaderSource*: proc (shader: GLuint, count: GLsizei, string: cstringArray, length: ptr GLint) {.cdecl.}
  glUseProgram*: proc (program: GLuint) {.cdecl.}
  glUniform1f*: proc (location: GLint, v0: GLfloat) {.cdecl.}
  glUniform2f*: proc (location: GLint, v0: GLfloat, v1: GLfloat) {.cdecl.}
  glUniform3f*: proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.cdecl.}
  glUniform4f*: proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.cdecl.}
  glUniform1i*: proc (location: GLint, v0: GLint) {.cdecl.}
  glUniform2i*: proc (location: GLint, v0: GLint, v1: GLint) {.cdecl.}
  glUniform3i*: proc (location: GLint, v0: GLint, v1: GLint, v2: GLint) {.cdecl.}
  glUniform4i*: proc (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.cdecl.}
  glUniform1fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl.}
  glUniform2fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl.}
  glUniform3fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl.}
  glUniform4fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl.}
  glUniform1iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl.}
  glUniform2iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl.}
  glUniform3iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl.}
  glUniform4iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl.}
  glUniformMatrix2fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}
  glUniformMatrix3fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}
  glUniformMatrix4fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}
  glValidateProgram*: proc (program: GLuint) {.cdecl.}
  glVertexAttrib1d*: proc (index: GLuint, x: GLdouble) {.cdecl.}
  glVertexAttrib1dv*: proc (index: GLuint, v: ptr GLdouble) {.cdecl.}
  glVertexAttrib1f*: proc (index: GLuint, x: GLfloat) {.cdecl.}
  glVertexAttrib1fv*: proc (index: GLuint, v: ptr GLfloat) {.cdecl.}
  glVertexAttrib1s*: proc (index: GLuint, x: GLshort) {.cdecl.}
  glVertexAttrib1sv*: proc (index: GLuint, v: ptr GLshort) {.cdecl.}
  glVertexAttrib2d*: proc (index: GLuint, x: GLdouble, y: GLdouble) {.cdecl.}
  glVertexAttrib2dv*: proc (index: GLuint, v: ptr GLdouble) {.cdecl.}
  glVertexAttrib2f*: proc (index: GLuint, x: GLfloat, y: GLfloat) {.cdecl.}
  glVertexAttrib2fv*: proc (index: GLuint, v: ptr GLfloat) {.cdecl.}
  glVertexAttrib2s*: proc (index: GLuint, x: GLshort, y: GLshort) {.cdecl.}
  glVertexAttrib2sv*: proc (index: GLuint, v: ptr GLshort) {.cdecl.}
  glVertexAttrib3d*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl.}
  glVertexAttrib3dv*: proc (index: GLuint, v: ptr GLdouble) {.cdecl.}
  glVertexAttrib3f*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl.}
  glVertexAttrib3fv*: proc (index: GLuint, v: ptr GLfloat) {.cdecl.}
  glVertexAttrib3s*: proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort) {.cdecl.}
  glVertexAttrib3sv*: proc (index: GLuint, v: ptr GLshort) {.cdecl.}
  glVertexAttrib4Nbv*: proc (index: GLuint, v: ptr GLbyte) {.cdecl.}
  glVertexAttrib4Niv*: proc (index: GLuint, v: ptr GLint) {.cdecl.}
  glVertexAttrib4Nsv*: proc (index: GLuint, v: ptr GLshort) {.cdecl.}
  glVertexAttrib4Nub*: proc (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) {.cdecl.}
  glVertexAttrib4Nubv*: proc (index: GLuint, v: ptr GLubyte) {.cdecl.}
  glVertexAttrib4Nuiv*: proc (index: GLuint, v: ptr GLuint) {.cdecl.}
  glVertexAttrib4Nusv*: proc (index: GLuint, v: ptr GLushort) {.cdecl.}
  glVertexAttrib4bv*: proc (index: GLuint, v: ptr GLbyte) {.cdecl.}
  glVertexAttrib4d*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl.}
  glVertexAttrib4dv*: proc (index: GLuint, v: ptr GLdouble) {.cdecl.}
  glVertexAttrib4f*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl.}
  glVertexAttrib4fv*: proc (index: GLuint, v: ptr GLfloat) {.cdecl.}
  glVertexAttrib4iv*: proc (index: GLuint, v: ptr GLint) {.cdecl.}
  glVertexAttrib4s*: proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.cdecl.}
  glVertexAttrib4sv*: proc (index: GLuint, v: ptr GLshort) {.cdecl.}
  glVertexAttrib4ubv*: proc (index: GLuint, v: ptr GLubyte) {.cdecl.}
  glVertexAttrib4uiv*: proc (index: GLuint, v: ptr GLuint) {.cdecl.}
  glVertexAttrib4usv*: proc (index: GLuint, v: ptr GLushort) {.cdecl.}
  glVertexAttribPointer*: proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.cdecl.}
  glUniformMatrix2x3fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}
  glUniformMatrix3x2fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}
  glUniformMatrix2x4fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}
  glUniformMatrix4x2fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}
  glUniformMatrix3x4fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}
  glUniformMatrix4x3fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}
  glColorMaski*: proc (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) {.cdecl.}
  glGetBooleani_v*: proc (target: GLenum, index: GLuint, data: ptr GLboolean) {.cdecl.}
  glGetIntegeri_v*: proc (target: GLenum, index: GLuint, data: ptr GLint) {.cdecl.}
  glEnablei*: proc (target: GLenum, index: GLuint) {.cdecl.}
  glDisablei*: proc (target: GLenum, index: GLuint) {.cdecl.}
  glIsEnabledi*: proc (target: GLenum, index: GLuint): GLboolean {.cdecl.}
  glBeginTransformFeedback*: proc (primitiveMode: GLenum) {.cdecl.}
  glEndTransformFeedback*: proc () {.cdecl.}
  glBindBufferRange*: proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.cdecl.}
  glBindBufferBase*: proc (target: GLenum, index: GLuint, buffer: GLuint) {.cdecl.}
  glTransformFeedbackVaryings*: proc (program: GLuint, count: GLsizei, varyings: cstringArray, bufferMode: GLenum) {.cdecl.}
  glGetTransformFeedbackVarying*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLsizei, `type`: ptr GLenum, name: cstring) {.cdecl.}
  glClampColor*: proc (target: GLenum, clamp: GLenum) {.cdecl.}
  glBeginConditionalRender*: proc (id: GLuint, mode: GLenum) {.cdecl.}
  glEndConditionalRender*: proc () {.cdecl.}
  glVertexAttribIPointer*: proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl.}
  glGetVertexAttribIiv*: proc (index: GLuint, pname: GLenum, params: ptr GLint) {.cdecl.}
  glGetVertexAttribIuiv*: proc (index: GLuint, pname: GLenum, params: ptr GLuint) {.cdecl.}
  glVertexAttribI1i*: proc (index: GLuint, x: GLint) {.cdecl.}
  glVertexAttribI2i*: proc (index: GLuint, x: GLint, y: GLint) {.cdecl.}
  glVertexAttribI3i*: proc (index: GLuint, x: GLint, y: GLint, z: GLint) {.cdecl.}
  glVertexAttribI4i*: proc (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) {.cdecl.}
  glVertexAttribI1ui*: proc (index: GLuint, x: GLuint) {.cdecl.}
  glVertexAttribI2ui*: proc (index: GLuint, x: GLuint, y: GLuint) {.cdecl.}
  glVertexAttribI3ui*: proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint) {.cdecl.}
  glVertexAttribI4ui*: proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) {.cdecl.}
  glVertexAttribI1iv*: proc (index: GLuint, v: ptr GLint) {.cdecl.}
  glVertexAttribI2iv*: proc (index: GLuint, v: ptr GLint) {.cdecl.}
  glVertexAttribI3iv*: proc (index: GLuint, v: ptr GLint) {.cdecl.}
  glVertexAttribI4iv*: proc (index: GLuint, v: ptr GLint) {.cdecl.}
  glVertexAttribI1uiv*: proc (index: GLuint, v: ptr GLuint) {.cdecl.}
  glVertexAttribI2uiv*: proc (index: GLuint, v: ptr GLuint) {.cdecl.}
  glVertexAttribI3uiv*: proc (index: GLuint, v: ptr GLuint) {.cdecl.}
  glVertexAttribI4uiv*: proc (index: GLuint, v: ptr GLuint) {.cdecl.}
  glVertexAttribI4bv*: proc (index: GLuint, v: ptr GLbyte) {.cdecl.}
  glVertexAttribI4sv*: proc (index: GLuint, v: ptr GLshort) {.cdecl.}
  glVertexAttribI4ubv*: proc (index: GLuint, v: ptr GLubyte) {.cdecl.}
  glVertexAttribI4usv*: proc (index: GLuint, v: ptr GLushort) {.cdecl.}
  glGetUniformuiv*: proc (program: GLuint, location: GLint, params: ptr GLuint) {.cdecl.}
  glBindFragDataLocation*: proc (program: GLuint, color: GLuint, name: cstring) {.cdecl.}
  glGetFragDataLocation*: proc (program: GLuint, name: cstring): GLint {.cdecl.}
  glUniform1ui*: proc (location: GLint, v0: GLuint) {.cdecl.}
  glUniform2ui*: proc (location: GLint, v0: GLuint, v1: GLuint) {.cdecl.}
  glUniform3ui*: proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.cdecl.}
  glUniform4ui*: proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.cdecl.}
  glUniform1uiv*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl.}
  glUniform2uiv*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl.}
  glUniform3uiv*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl.}
  glUniform4uiv*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl.}
  glTexParameterIiv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}
  glTexParameterIuiv*: proc (target: GLenum, pname: GLenum, params: ptr GLuint) {.cdecl.}
  glGetTexParameterIiv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}
  glGetTexParameterIuiv*: proc (target: GLenum, pname: GLenum, params: ptr GLuint) {.cdecl.}
  glClearBufferiv*: proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLint) {.cdecl.}
  glClearBufferuiv*: proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLuint) {.cdecl.}
  glClearBufferfv*: proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLfloat) {.cdecl.}
  glClearBufferfi*: proc (buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) {.cdecl.}
  glGetStringi*: proc (name: GLenum, index: GLuint): ptr GLubyte {.cdecl.}
  glIsRenderbuffer*: proc (renderbuffer: GLuint): GLboolean {.cdecl.}
  glBindRenderbuffer*: proc (target: GLenum, renderbuffer: GLuint) {.cdecl.}
  glDeleteRenderbuffers*: proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl.}
  glGenRenderbuffers*: proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl.}
  glRenderbufferStorage*: proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl.}
  glGetRenderbufferParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}
  glIsFramebuffer*: proc (framebuffer: GLuint): GLboolean {.cdecl.}
  glBindFramebuffer*: proc (target: GLenum, framebuffer: GLuint) {.cdecl.}
  glDeleteFramebuffers*: proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl.}
  glGenFramebuffers*: proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl.}
  glCheckFramebufferStatus*: proc (target: GLenum): GLenum {.cdecl.}
  glFramebufferTexture1D*: proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.cdecl.}
  glFramebufferTexture2D*: proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.cdecl.}
  glFramebufferTexture3D*: proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) {.cdecl.}
  glFramebufferRenderbuffer*: proc (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.cdecl.}
  glGetFramebufferAttachmentParameteriv*: proc (target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}
  glGenerateMipmap*: proc (target: GLenum) {.cdecl.}
  glBlitFramebuffer*: proc (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) {.cdecl.}
  glRenderbufferStorageMultisample*: proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl.}
  glFramebufferTextureLayer*: proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.cdecl.}
  glMapBufferRange*: proc (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.cdecl.}
  glFlushMappedBufferRange*: proc (target: GLenum, offset: GLintptr, length: GLsizeiptr) {.cdecl.}
  glBindVertexArray*: proc (array: GLuint) {.cdecl.}
  glDeleteVertexArrays*: proc (n: GLsizei, arrays: ptr GLuint) {.cdecl.}
  glGenVertexArrays*: proc (n: GLsizei, arrays: ptr GLuint) {.cdecl.}
  glIsVertexArray*: proc (array: GLuint): GLboolean {.cdecl.}
  glDrawArraysInstanced*: proc (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) {.cdecl.}
  glDrawElementsInstanced*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei) {.cdecl.}
  glTexBuffer*: proc (target: GLenum, internalformat: GLenum, buffer: GLuint) {.cdecl.}
  glPrimitiveRestartIndex*: proc (index: GLuint) {.cdecl.}
  glCopyBufferSubData*: proc (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) {.cdecl.}
  glGetUniformIndices*: proc (program: GLuint, uniformCount: GLsizei, uniformNames: cstringArray, uniformIndices: ptr GLuint) {.cdecl.}
  glGetActiveUniformsiv*: proc (program: GLuint, uniformCount: GLsizei, uniformIndices: ptr GLuint, pname: GLenum, params: ptr GLint) {.cdecl.}
  glGetActiveUniformName*: proc (program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformName: cstring) {.cdecl.}
  glGetUniformBlockIndex*: proc (program: GLuint, uniformBlockName: cstring): GLuint {.cdecl.}
  glGetActiveUniformBlockiv*: proc (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: ptr GLint) {.cdecl.}
  glGetActiveUniformBlockName*: proc (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformBlockName: cstring) {.cdecl.}
  glUniformBlockBinding*: proc (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) {.cdecl.}
  glDrawElementsBaseVertex*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.cdecl.}
  glDrawRangeElementsBaseVertex*: proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.cdecl.}
  glDrawElementsInstancedBaseVertex*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint) {.cdecl.}
  glMultiDrawElementsBaseVertex*: proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei, basevertex: ptr GLint) {.cdecl.}
  glProvokingVertex*: proc (mode: GLenum) {.cdecl.}
  glFenceSync*: proc (condition: GLenum, flags: GLbitfield): GLsync {.cdecl.}
  glIsSync*: proc (sync: GLsync): GLboolean {.cdecl.}
  glDeleteSync*: proc (sync: GLsync) {.cdecl.}
  glClientWaitSync*: proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64): GLenum {.cdecl.}
  glWaitSync*: proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64) {.cdecl.}
  glGetInteger64v*: proc (pname: GLenum, data: ptr GLint64) {.cdecl.}
  glGetSynciv*: proc (sync: GLsync, pname: GLenum, bufSize: GLsizei, length: ptr GLsizei, values: ptr GLint) {.cdecl.}
  glGetInteger64i_v*: proc (target: GLenum, index: GLuint, data: ptr GLint64) {.cdecl.}
  glGetBufferParameteri64v*: proc (target: GLenum, pname: GLenum, params: ptr GLint64) {.cdecl.}
  glFramebufferTexture*: proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) {.cdecl.}
  glTexImage2DMultisample*: proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) {.cdecl.}
  glTexImage3DMultisample*: proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) {.cdecl.}
  glGetMultisamplefv*: proc (pname: GLenum, index: GLuint, val: ptr GLfloat) {.cdecl.}
  glSampleMaski*: proc (maskNumber: GLuint, mask: GLbitfield) {.cdecl.}


# Extensions


proc hasExt*(extname: string): bool =
  if extname.len == 0:
    return false

  if glVersionMajor < 3:
    var extensions = $cast[cstring](glGetString(GL_EXTENSIONS))
    if extensions.len == 0:
      return false

    var
      loc, terminatorLoc: int
      terminator: char

    while true:
      loc = extensions.find(extname)
      if loc < 0:
        return false

      terminatorLoc = loc + extname.len
      terminator = extensions[terminatorLoc]

      if (loc == 0 or extensions[loc - 1] == ' ') and
         (terminator == ' ' or terminator == '\0'):
        return true

      extensions = extensions[terminatorLoc..^1]

  else:
    var
      num: GLint
      s: cstring

    glGetIntegerv(GL_NUM_EXTENSIONS, num.addr)

    for i in 0..num-1:
      s = cast[cstring](glGetStringi(GL_EXTENSIONS, GLuint(i)))
      if s == extname:
        return true


proc load_GL_VERSION_1_0(load: proc) =
  if not GLAD_GL_VERSION_1_0: return

  glCullFace = cast[proc (mode: GLenum) {.cdecl.}](load("glCullFace"))
  glFrontFace = cast[proc (mode: GLenum) {.cdecl.}](load("glFrontFace"))
  glHint = cast[proc (target: GLenum, mode: GLenum) {.cdecl.}](load("glHint"))
  glLineWidth = cast[proc (width: GLfloat) {.cdecl.}](load("glLineWidth"))
  glPointSize = cast[proc (size: GLfloat) {.cdecl.}](load("glPointSize"))
  glPolygonMode = cast[proc (face: GLenum, mode: GLenum) {.cdecl.}](load("glPolygonMode"))
  glScissor = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl.}](load("glScissor"))
  glTexParameterf = cast[proc (target: GLenum, pname: GLenum, param: GLfloat) {.cdecl.}](load("glTexParameterf"))
  glTexParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl.}](load("glTexParameterfv"))
  glTexParameteri = cast[proc (target: GLenum, pname: GLenum, param: GLint) {.cdecl.}](load("glTexParameteri"))
  glTexParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glTexParameteriv"))
  glTexImage1D = cast[proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}](load("glTexImage1D"))
  glTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}](load("glTexImage2D"))
  glDrawBuffer = cast[proc (buf: GLenum) {.cdecl.}](load("glDrawBuffer"))
  glClear = cast[proc (mask: GLbitfield) {.cdecl.}](load("glClear"))
  glClearColor = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl.}](load("glClearColor"))
  glClearStencil = cast[proc (s: GLint) {.cdecl.}](load("glClearStencil"))
  glClearDepth = cast[proc (depth: GLdouble) {.cdecl.}](load("glClearDepth"))
  glStencilMask = cast[proc (mask: GLuint) {.cdecl.}](load("glStencilMask"))
  glColorMask = cast[proc (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) {.cdecl.}](load("glColorMask"))
  glDepthMask = cast[proc (flag: GLboolean) {.cdecl.}](load("glDepthMask"))
  glDisable = cast[proc (cap: GLenum) {.cdecl.}](load("glDisable"))
  glEnable = cast[proc (cap: GLenum) {.cdecl.}](load("glEnable"))
  glFinish = cast[proc () {.cdecl.}](load("glFinish"))
  glFlush = cast[proc () {.cdecl.}](load("glFlush"))
  glBlendFunc = cast[proc (sfactor: GLenum, dfactor: GLenum) {.cdecl.}](load("glBlendFunc"))
  glLogicOp = cast[proc (opcode: GLenum) {.cdecl.}](load("glLogicOp"))
  glStencilFunc = cast[proc (`func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl.}](load("glStencilFunc"))
  glStencilOp = cast[proc (fail: GLenum, zfail: GLenum, zpass: GLenum) {.cdecl.}](load("glStencilOp"))
  glDepthFunc = cast[proc (`func`: GLenum) {.cdecl.}](load("glDepthFunc"))
  glPixelStoref = cast[proc (pname: GLenum, param: GLfloat) {.cdecl.}](load("glPixelStoref"))
  glPixelStorei = cast[proc (pname: GLenum, param: GLint) {.cdecl.}](load("glPixelStorei"))
  glReadBuffer = cast[proc (src: GLenum) {.cdecl.}](load("glReadBuffer"))
  glReadPixels = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}](load("glReadPixels"))
  glGetBooleanv = cast[proc (pname: GLenum, data: ptr GLboolean) {.cdecl.}](load("glGetBooleanv"))
  glGetDoublev = cast[proc (pname: GLenum, data: ptr GLdouble) {.cdecl.}](load("glGetDoublev"))
  glGetError = cast[proc (): GLenum {.cdecl.}](load("glGetError"))
  glGetFloatv = cast[proc (pname: GLenum, data: ptr GLfloat) {.cdecl.}](load("glGetFloatv"))
  glGetIntegerv = cast[proc (pname: GLenum, data: ptr GLint) {.cdecl.}](load("glGetIntegerv"))
  glGetString = cast[proc (name: GLenum): ptr GLubyte {.cdecl.}](load("glGetString"))
  glGetTexImage = cast[proc (target: GLenum, level: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}](load("glGetTexImage"))
  glGetTexParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl.}](load("glGetTexParameterfv"))
  glGetTexParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glGetTexParameteriv"))
  glGetTexLevelParameterfv = cast[proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLfloat) {.cdecl.}](load("glGetTexLevelParameterfv"))
  glGetTexLevelParameteriv = cast[proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glGetTexLevelParameteriv"))
  glIsEnabled = cast[proc (cap: GLenum): GLboolean {.cdecl.}](load("glIsEnabled"))
  glDepthRange = cast[proc (n: GLdouble, f: GLdouble) {.cdecl.}](load("glDepthRange"))
  glViewport = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl.}](load("glViewport"))


proc load_GL_VERSION_1_1(load: proc) =
  if not GLAD_GL_VERSION_1_1: return

  glDrawArrays = cast[proc (mode: GLenum, first: GLint, count: GLsizei) {.cdecl.}](load("glDrawArrays"))
  glDrawElements = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer) {.cdecl.}](load("glDrawElements"))
  glPolygonOffset = cast[proc (factor: GLfloat, units: GLfloat) {.cdecl.}](load("glPolygonOffset"))
  glCopyTexImage1D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) {.cdecl.}](load("glCopyTexImage1D"))
  glCopyTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.cdecl.}](load("glCopyTexImage2D"))
  glCopyTexSubImage1D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) {.cdecl.}](load("glCopyTexSubImage1D"))
  glCopyTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl.}](load("glCopyTexSubImage2D"))
  glTexSubImage1D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}](load("glTexSubImage1D"))
  glTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}](load("glTexSubImage2D"))
  glBindTexture = cast[proc (target: GLenum, texture: GLuint) {.cdecl.}](load("glBindTexture"))
  glDeleteTextures = cast[proc (n: GLsizei, textures: ptr GLuint) {.cdecl.}](load("glDeleteTextures"))
  glGenTextures = cast[proc (n: GLsizei, textures: ptr GLuint) {.cdecl.}](load("glGenTextures"))
  glIsTexture = cast[proc (texture: GLuint): GLboolean {.cdecl.}](load("glIsTexture"))


proc load_GL_VERSION_1_2(load: proc) =
  if not GLAD_GL_VERSION_1_2: return

  glDrawRangeElements = cast[proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer) {.cdecl.}](load("glDrawRangeElements"))
  glTexImage3D = cast[proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}](load("glTexImage3D"))
  glTexSubImage3D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}](load("glTexSubImage3D"))
  glCopyTexSubImage3D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl.}](load("glCopyTexSubImage3D"))


proc load_GL_VERSION_1_3(load: proc) =
  if not GLAD_GL_VERSION_1_3: return

  glActiveTexture = cast[proc (texture: GLenum) {.cdecl.}](load("glActiveTexture"))
  glSampleCoverage = cast[proc (value: GLfloat, invert: GLboolean) {.cdecl.}](load("glSampleCoverage"))
  glCompressedTexImage3D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl.}](load("glCompressedTexImage3D"))
  glCompressedTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl.}](load("glCompressedTexImage2D"))
  glCompressedTexImage1D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl.}](load("glCompressedTexImage1D"))
  glCompressedTexSubImage3D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl.}](load("glCompressedTexSubImage3D"))
  glCompressedTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl.}](load("glCompressedTexSubImage2D"))
  glCompressedTexSubImage1D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl.}](load("glCompressedTexSubImage1D"))
  glGetCompressedTexImage = cast[proc (target: GLenum, level: GLint, img: pointer) {.cdecl.}](load("glGetCompressedTexImage"))


proc load_GL_VERSION_1_4(load: proc) =
  if not GLAD_GL_VERSION_1_4: return

  glBlendFuncSeparate = cast[proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) {.cdecl.}](load("glBlendFuncSeparate"))
  glMultiDrawArrays = cast[proc (mode: GLenum, first: ptr GLint, count: ptr GLsizei, drawcount: GLsizei) {.cdecl.}](load("glMultiDrawArrays"))
  glMultiDrawElements = cast[proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei) {.cdecl.}](load("glMultiDrawElements"))
  glPointParameterf = cast[proc (pname: GLenum, param: GLfloat) {.cdecl.}](load("glPointParameterf"))
  glPointParameterfv = cast[proc (pname: GLenum, params: ptr GLfloat) {.cdecl.}](load("glPointParameterfv"))
  glPointParameteri = cast[proc (pname: GLenum, param: GLint) {.cdecl.}](load("glPointParameteri"))
  glPointParameteriv = cast[proc (pname: GLenum, params: ptr GLint) {.cdecl.}](load("glPointParameteriv"))
  glBlendColor = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl.}](load("glBlendColor"))
  glBlendEquation = cast[proc (mode: GLenum) {.cdecl.}](load("glBlendEquation"))


proc load_GL_VERSION_1_5(load: proc) =
  if not GLAD_GL_VERSION_1_5: return

  glGenQueries = cast[proc (n: GLsizei, ids: ptr GLuint) {.cdecl.}](load("glGenQueries"))
  glDeleteQueries = cast[proc (n: GLsizei, ids: ptr GLuint) {.cdecl.}](load("glDeleteQueries"))
  glIsQuery = cast[proc (id: GLuint): GLboolean {.cdecl.}](load("glIsQuery"))
  glBeginQuery = cast[proc (target: GLenum, id: GLuint) {.cdecl.}](load("glBeginQuery"))
  glEndQuery = cast[proc (target: GLenum) {.cdecl.}](load("glEndQuery"))
  glGetQueryiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glGetQueryiv"))
  glGetQueryObjectiv = cast[proc (id: GLuint, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glGetQueryObjectiv"))
  glGetQueryObjectuiv = cast[proc (id: GLuint, pname: GLenum, params: ptr GLuint) {.cdecl.}](load("glGetQueryObjectuiv"))
  glBindBuffer = cast[proc (target: GLenum, buffer: GLuint) {.cdecl.}](load("glBindBuffer"))
  glDeleteBuffers = cast[proc (n: GLsizei, buffers: ptr GLuint) {.cdecl.}](load("glDeleteBuffers"))
  glGenBuffers = cast[proc (n: GLsizei, buffers: ptr GLuint) {.cdecl.}](load("glGenBuffers"))
  glIsBuffer = cast[proc (buffer: GLuint): GLboolean {.cdecl.}](load("glIsBuffer"))
  glBufferData = cast[proc (target: GLenum, size: GLsizeiptr, data: pointer, usage: GLenum) {.cdecl.}](load("glBufferData"))
  glBufferSubData = cast[proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.cdecl.}](load("glBufferSubData"))
  glGetBufferSubData = cast[proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.cdecl.}](load("glGetBufferSubData"))
  glMapBuffer = cast[proc (target: GLenum, access: GLenum): pointer {.cdecl.}](load("glMapBuffer"))
  glUnmapBuffer = cast[proc (target: GLenum): GLboolean {.cdecl.}](load("glUnmapBuffer"))
  glGetBufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glGetBufferParameteriv"))
  glGetBufferPointerv = cast[proc (target: GLenum, pname: GLenum, params: ptr pointer) {.cdecl.}](load("glGetBufferPointerv"))


proc load_GL_VERSION_2_0(load: proc) =
  if not GLAD_GL_VERSION_2_0: return

  glBlendEquationSeparate = cast[proc (modeRGB: GLenum, modeAlpha: GLenum) {.cdecl.}](load("glBlendEquationSeparate"))
  glDrawBuffers = cast[proc (n: GLsizei, bufs: ptr GLenum) {.cdecl.}](load("glDrawBuffers"))
  glStencilOpSeparate = cast[proc (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) {.cdecl.}](load("glStencilOpSeparate"))
  glStencilFuncSeparate = cast[proc (face: GLenum, `func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl.}](load("glStencilFuncSeparate"))
  glStencilMaskSeparate = cast[proc (face: GLenum, mask: GLuint) {.cdecl.}](load("glStencilMaskSeparate"))
  glAttachShader = cast[proc (program: GLuint, shader: GLuint) {.cdecl.}](load("glAttachShader"))
  glBindAttribLocation = cast[proc (program: GLuint, index: GLuint, name: cstring) {.cdecl.}](load("glBindAttribLocation"))
  glCompileShader = cast[proc (shader: GLuint) {.cdecl.}](load("glCompileShader"))
  glCreateProgram = cast[proc (): GLuint {.cdecl.}](load("glCreateProgram"))
  glCreateShader = cast[proc (`type`: GLenum): GLuint {.cdecl.}](load("glCreateShader"))
  glDeleteProgram = cast[proc (program: GLuint) {.cdecl.}](load("glDeleteProgram"))
  glDeleteShader = cast[proc (shader: GLuint) {.cdecl.}](load("glDeleteShader"))
  glDetachShader = cast[proc (program: GLuint, shader: GLuint) {.cdecl.}](load("glDetachShader"))
  glDisableVertexAttribArray = cast[proc (index: GLuint) {.cdecl.}](load("glDisableVertexAttribArray"))
  glEnableVertexAttribArray = cast[proc (index: GLuint) {.cdecl.}](load("glEnableVertexAttribArray"))
  glGetActiveAttrib = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl.}](load("glGetActiveAttrib"))
  glGetActiveUniform = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl.}](load("glGetActiveUniform"))
  glGetAttachedShaders = cast[proc (program: GLuint, maxCount: GLsizei, count: ptr GLsizei, shaders: ptr GLuint) {.cdecl.}](load("glGetAttachedShaders"))
  glGetAttribLocation = cast[proc (program: GLuint, name: cstring): GLint {.cdecl.}](load("glGetAttribLocation"))
  glGetProgramiv = cast[proc (program: GLuint, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glGetProgramiv"))
  glGetProgramInfoLog = cast[proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl.}](load("glGetProgramInfoLog"))
  glGetShaderiv = cast[proc (shader: GLuint, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glGetShaderiv"))
  glGetShaderInfoLog = cast[proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl.}](load("glGetShaderInfoLog"))
  glGetShaderSource = cast[proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, source: cstring) {.cdecl.}](load("glGetShaderSource"))
  glGetUniformLocation = cast[proc (program: GLuint, name: cstring): GLint {.cdecl.}](load("glGetUniformLocation"))
  glGetUniformfv = cast[proc (program: GLuint, location: GLint, params: ptr GLfloat) {.cdecl.}](load("glGetUniformfv"))
  glGetUniformiv = cast[proc (program: GLuint, location: GLint, params: ptr GLint) {.cdecl.}](load("glGetUniformiv"))
  glGetVertexAttribdv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.cdecl.}](load("glGetVertexAttribdv"))
  glGetVertexAttribfv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.cdecl.}](load("glGetVertexAttribfv"))
  glGetVertexAttribiv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glGetVertexAttribiv"))
  glGetVertexAttribPointerv = cast[proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.cdecl.}](load("glGetVertexAttribPointerv"))
  glIsProgram = cast[proc (program: GLuint): GLboolean {.cdecl.}](load("glIsProgram"))
  glIsShader = cast[proc (shader: GLuint): GLboolean {.cdecl.}](load("glIsShader"))
  glLinkProgram = cast[proc (program: GLuint) {.cdecl.}](load("glLinkProgram"))
  glShaderSource = cast[proc (shader: GLuint, count: GLsizei, string: cstringArray, length: ptr GLint) {.cdecl.}](load("glShaderSource"))
  glUseProgram = cast[proc (program: GLuint) {.cdecl.}](load("glUseProgram"))
  glUniform1f = cast[proc (location: GLint, v0: GLfloat) {.cdecl.}](load("glUniform1f"))
  glUniform2f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat) {.cdecl.}](load("glUniform2f"))
  glUniform3f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.cdecl.}](load("glUniform3f"))
  glUniform4f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.cdecl.}](load("glUniform4f"))
  glUniform1i = cast[proc (location: GLint, v0: GLint) {.cdecl.}](load("glUniform1i"))
  glUniform2i = cast[proc (location: GLint, v0: GLint, v1: GLint) {.cdecl.}](load("glUniform2i"))
  glUniform3i = cast[proc (location: GLint, v0: GLint, v1: GLint, v2: GLint) {.cdecl.}](load("glUniform3i"))
  glUniform4i = cast[proc (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.cdecl.}](load("glUniform4i"))
  glUniform1fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl.}](load("glUniform1fv"))
  glUniform2fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl.}](load("glUniform2fv"))
  glUniform3fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl.}](load("glUniform3fv"))
  glUniform4fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl.}](load("glUniform4fv"))
  glUniform1iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl.}](load("glUniform1iv"))
  glUniform2iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl.}](load("glUniform2iv"))
  glUniform3iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl.}](load("glUniform3iv"))
  glUniform4iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl.}](load("glUniform4iv"))
  glUniformMatrix2fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}](load("glUniformMatrix2fv"))
  glUniformMatrix3fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}](load("glUniformMatrix3fv"))
  glUniformMatrix4fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}](load("glUniformMatrix4fv"))
  glValidateProgram = cast[proc (program: GLuint) {.cdecl.}](load("glValidateProgram"))
  glVertexAttrib1d = cast[proc (index: GLuint, x: GLdouble) {.cdecl.}](load("glVertexAttrib1d"))
  glVertexAttrib1dv = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl.}](load("glVertexAttrib1dv"))
  glVertexAttrib1f = cast[proc (index: GLuint, x: GLfloat) {.cdecl.}](load("glVertexAttrib1f"))
  glVertexAttrib1fv = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl.}](load("glVertexAttrib1fv"))
  glVertexAttrib1s = cast[proc (index: GLuint, x: GLshort) {.cdecl.}](load("glVertexAttrib1s"))
  glVertexAttrib1sv = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl.}](load("glVertexAttrib1sv"))
  glVertexAttrib2d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble) {.cdecl.}](load("glVertexAttrib2d"))
  glVertexAttrib2dv = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl.}](load("glVertexAttrib2dv"))
  glVertexAttrib2f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat) {.cdecl.}](load("glVertexAttrib2f"))
  glVertexAttrib2fv = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl.}](load("glVertexAttrib2fv"))
  glVertexAttrib2s = cast[proc (index: GLuint, x: GLshort, y: GLshort) {.cdecl.}](load("glVertexAttrib2s"))
  glVertexAttrib2sv = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl.}](load("glVertexAttrib2sv"))
  glVertexAttrib3d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.cdecl.}](load("glVertexAttrib3d"))
  glVertexAttrib3dv = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl.}](load("glVertexAttrib3dv"))
  glVertexAttrib3f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl.}](load("glVertexAttrib3f"))
  glVertexAttrib3fv = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl.}](load("glVertexAttrib3fv"))
  glVertexAttrib3s = cast[proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort) {.cdecl.}](load("glVertexAttrib3s"))
  glVertexAttrib3sv = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl.}](load("glVertexAttrib3sv"))
  glVertexAttrib4Nbv = cast[proc (index: GLuint, v: ptr GLbyte) {.cdecl.}](load("glVertexAttrib4Nbv"))
  glVertexAttrib4Niv = cast[proc (index: GLuint, v: ptr GLint) {.cdecl.}](load("glVertexAttrib4Niv"))
  glVertexAttrib4Nsv = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl.}](load("glVertexAttrib4Nsv"))
  glVertexAttrib4Nub = cast[proc (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) {.cdecl.}](load("glVertexAttrib4Nub"))
  glVertexAttrib4Nubv = cast[proc (index: GLuint, v: ptr GLubyte) {.cdecl.}](load("glVertexAttrib4Nubv"))
  glVertexAttrib4Nuiv = cast[proc (index: GLuint, v: ptr GLuint) {.cdecl.}](load("glVertexAttrib4Nuiv"))
  glVertexAttrib4Nusv = cast[proc (index: GLuint, v: ptr GLushort) {.cdecl.}](load("glVertexAttrib4Nusv"))
  glVertexAttrib4bv = cast[proc (index: GLuint, v: ptr GLbyte) {.cdecl.}](load("glVertexAttrib4bv"))
  glVertexAttrib4d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.cdecl.}](load("glVertexAttrib4d"))
  glVertexAttrib4dv = cast[proc (index: GLuint, v: ptr GLdouble) {.cdecl.}](load("glVertexAttrib4dv"))
  glVertexAttrib4f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl.}](load("glVertexAttrib4f"))
  glVertexAttrib4fv = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl.}](load("glVertexAttrib4fv"))
  glVertexAttrib4iv = cast[proc (index: GLuint, v: ptr GLint) {.cdecl.}](load("glVertexAttrib4iv"))
  glVertexAttrib4s = cast[proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.cdecl.}](load("glVertexAttrib4s"))
  glVertexAttrib4sv = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl.}](load("glVertexAttrib4sv"))
  glVertexAttrib4ubv = cast[proc (index: GLuint, v: ptr GLubyte) {.cdecl.}](load("glVertexAttrib4ubv"))
  glVertexAttrib4uiv = cast[proc (index: GLuint, v: ptr GLuint) {.cdecl.}](load("glVertexAttrib4uiv"))
  glVertexAttrib4usv = cast[proc (index: GLuint, v: ptr GLushort) {.cdecl.}](load("glVertexAttrib4usv"))
  glVertexAttribPointer = cast[proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.cdecl.}](load("glVertexAttribPointer"))


proc load_GL_VERSION_2_1(load: proc) =
  if not GLAD_GL_VERSION_2_1: return

  glUniformMatrix2x3fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}](load("glUniformMatrix2x3fv"))
  glUniformMatrix3x2fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}](load("glUniformMatrix3x2fv"))
  glUniformMatrix2x4fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}](load("glUniformMatrix2x4fv"))
  glUniformMatrix4x2fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}](load("glUniformMatrix4x2fv"))
  glUniformMatrix3x4fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}](load("glUniformMatrix3x4fv"))
  glUniformMatrix4x3fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}](load("glUniformMatrix4x3fv"))


proc load_GL_VERSION_3_0(load: proc) =
  if not GLAD_GL_VERSION_3_0: return

  glColorMaski = cast[proc (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) {.cdecl.}](load("glColorMaski"))
  glGetBooleani_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLboolean) {.cdecl.}](load("glGetBooleani_v"))
  glGetIntegeri_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLint) {.cdecl.}](load("glGetIntegeri_v"))
  glEnablei = cast[proc (target: GLenum, index: GLuint) {.cdecl.}](load("glEnablei"))
  glDisablei = cast[proc (target: GLenum, index: GLuint) {.cdecl.}](load("glDisablei"))
  glIsEnabledi = cast[proc (target: GLenum, index: GLuint): GLboolean {.cdecl.}](load("glIsEnabledi"))
  glBeginTransformFeedback = cast[proc (primitiveMode: GLenum) {.cdecl.}](load("glBeginTransformFeedback"))
  glEndTransformFeedback = cast[proc () {.cdecl.}](load("glEndTransformFeedback"))
  glBindBufferRange = cast[proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.cdecl.}](load("glBindBufferRange"))
  glBindBufferBase = cast[proc (target: GLenum, index: GLuint, buffer: GLuint) {.cdecl.}](load("glBindBufferBase"))
  glTransformFeedbackVaryings = cast[proc (program: GLuint, count: GLsizei, varyings: cstringArray, bufferMode: GLenum) {.cdecl.}](load("glTransformFeedbackVaryings"))
  glGetTransformFeedbackVarying = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLsizei, `type`: ptr GLenum, name: cstring) {.cdecl.}](load("glGetTransformFeedbackVarying"))
  glClampColor = cast[proc (target: GLenum, clamp: GLenum) {.cdecl.}](load("glClampColor"))
  glBeginConditionalRender = cast[proc (id: GLuint, mode: GLenum) {.cdecl.}](load("glBeginConditionalRender"))
  glEndConditionalRender = cast[proc () {.cdecl.}](load("glEndConditionalRender"))
  glVertexAttribIPointer = cast[proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.cdecl.}](load("glVertexAttribIPointer"))
  glGetVertexAttribIiv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glGetVertexAttribIiv"))
  glGetVertexAttribIuiv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLuint) {.cdecl.}](load("glGetVertexAttribIuiv"))
  glVertexAttribI1i = cast[proc (index: GLuint, x: GLint) {.cdecl.}](load("glVertexAttribI1i"))
  glVertexAttribI2i = cast[proc (index: GLuint, x: GLint, y: GLint) {.cdecl.}](load("glVertexAttribI2i"))
  glVertexAttribI3i = cast[proc (index: GLuint, x: GLint, y: GLint, z: GLint) {.cdecl.}](load("glVertexAttribI3i"))
  glVertexAttribI4i = cast[proc (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) {.cdecl.}](load("glVertexAttribI4i"))
  glVertexAttribI1ui = cast[proc (index: GLuint, x: GLuint) {.cdecl.}](load("glVertexAttribI1ui"))
  glVertexAttribI2ui = cast[proc (index: GLuint, x: GLuint, y: GLuint) {.cdecl.}](load("glVertexAttribI2ui"))
  glVertexAttribI3ui = cast[proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint) {.cdecl.}](load("glVertexAttribI3ui"))
  glVertexAttribI4ui = cast[proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) {.cdecl.}](load("glVertexAttribI4ui"))
  glVertexAttribI1iv = cast[proc (index: GLuint, v: ptr GLint) {.cdecl.}](load("glVertexAttribI1iv"))
  glVertexAttribI2iv = cast[proc (index: GLuint, v: ptr GLint) {.cdecl.}](load("glVertexAttribI2iv"))
  glVertexAttribI3iv = cast[proc (index: GLuint, v: ptr GLint) {.cdecl.}](load("glVertexAttribI3iv"))
  glVertexAttribI4iv = cast[proc (index: GLuint, v: ptr GLint) {.cdecl.}](load("glVertexAttribI4iv"))
  glVertexAttribI1uiv = cast[proc (index: GLuint, v: ptr GLuint) {.cdecl.}](load("glVertexAttribI1uiv"))
  glVertexAttribI2uiv = cast[proc (index: GLuint, v: ptr GLuint) {.cdecl.}](load("glVertexAttribI2uiv"))
  glVertexAttribI3uiv = cast[proc (index: GLuint, v: ptr GLuint) {.cdecl.}](load("glVertexAttribI3uiv"))
  glVertexAttribI4uiv = cast[proc (index: GLuint, v: ptr GLuint) {.cdecl.}](load("glVertexAttribI4uiv"))
  glVertexAttribI4bv = cast[proc (index: GLuint, v: ptr GLbyte) {.cdecl.}](load("glVertexAttribI4bv"))
  glVertexAttribI4sv = cast[proc (index: GLuint, v: ptr GLshort) {.cdecl.}](load("glVertexAttribI4sv"))
  glVertexAttribI4ubv = cast[proc (index: GLuint, v: ptr GLubyte) {.cdecl.}](load("glVertexAttribI4ubv"))
  glVertexAttribI4usv = cast[proc (index: GLuint, v: ptr GLushort) {.cdecl.}](load("glVertexAttribI4usv"))
  glGetUniformuiv = cast[proc (program: GLuint, location: GLint, params: ptr GLuint) {.cdecl.}](load("glGetUniformuiv"))
  glBindFragDataLocation = cast[proc (program: GLuint, color: GLuint, name: cstring) {.cdecl.}](load("glBindFragDataLocation"))
  glGetFragDataLocation = cast[proc (program: GLuint, name: cstring): GLint {.cdecl.}](load("glGetFragDataLocation"))
  glUniform1ui = cast[proc (location: GLint, v0: GLuint) {.cdecl.}](load("glUniform1ui"))
  glUniform2ui = cast[proc (location: GLint, v0: GLuint, v1: GLuint) {.cdecl.}](load("glUniform2ui"))
  glUniform3ui = cast[proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.cdecl.}](load("glUniform3ui"))
  glUniform4ui = cast[proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.cdecl.}](load("glUniform4ui"))
  glUniform1uiv = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl.}](load("glUniform1uiv"))
  glUniform2uiv = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl.}](load("glUniform2uiv"))
  glUniform3uiv = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl.}](load("glUniform3uiv"))
  glUniform4uiv = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.cdecl.}](load("glUniform4uiv"))
  glTexParameterIiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glTexParameterIiv"))
  glTexParameterIuiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLuint) {.cdecl.}](load("glTexParameterIuiv"))
  glGetTexParameterIiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glGetTexParameterIiv"))
  glGetTexParameterIuiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLuint) {.cdecl.}](load("glGetTexParameterIuiv"))
  glClearBufferiv = cast[proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLint) {.cdecl.}](load("glClearBufferiv"))
  glClearBufferuiv = cast[proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLuint) {.cdecl.}](load("glClearBufferuiv"))
  glClearBufferfv = cast[proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLfloat) {.cdecl.}](load("glClearBufferfv"))
  glClearBufferfi = cast[proc (buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) {.cdecl.}](load("glClearBufferfi"))
  glGetStringi = cast[proc (name: GLenum, index: GLuint): ptr GLubyte {.cdecl.}](load("glGetStringi"))
  glIsRenderbuffer = cast[proc (renderbuffer: GLuint): GLboolean {.cdecl.}](load("glIsRenderbuffer"))
  glBindRenderbuffer = cast[proc (target: GLenum, renderbuffer: GLuint) {.cdecl.}](load("glBindRenderbuffer"))
  glDeleteRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl.}](load("glDeleteRenderbuffers"))
  glGenRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl.}](load("glGenRenderbuffers"))
  glRenderbufferStorage = cast[proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl.}](load("glRenderbufferStorage"))
  glGetRenderbufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glGetRenderbufferParameteriv"))
  glIsFramebuffer = cast[proc (framebuffer: GLuint): GLboolean {.cdecl.}](load("glIsFramebuffer"))
  glBindFramebuffer = cast[proc (target: GLenum, framebuffer: GLuint) {.cdecl.}](load("glBindFramebuffer"))
  glDeleteFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl.}](load("glDeleteFramebuffers"))
  glGenFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl.}](load("glGenFramebuffers"))
  glCheckFramebufferStatus = cast[proc (target: GLenum): GLenum {.cdecl.}](load("glCheckFramebufferStatus"))
  glFramebufferTexture1D = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.cdecl.}](load("glFramebufferTexture1D"))
  glFramebufferTexture2D = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.cdecl.}](load("glFramebufferTexture2D"))
  glFramebufferTexture3D = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) {.cdecl.}](load("glFramebufferTexture3D"))
  glFramebufferRenderbuffer = cast[proc (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.cdecl.}](load("glFramebufferRenderbuffer"))
  glGetFramebufferAttachmentParameteriv = cast[proc (target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glGetFramebufferAttachmentParameteriv"))
  glGenerateMipmap = cast[proc (target: GLenum) {.cdecl.}](load("glGenerateMipmap"))
  glBlitFramebuffer = cast[proc (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) {.cdecl.}](load("glBlitFramebuffer"))
  glRenderbufferStorageMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl.}](load("glRenderbufferStorageMultisample"))
  glFramebufferTextureLayer = cast[proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.cdecl.}](load("glFramebufferTextureLayer"))
  glMapBufferRange = cast[proc (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.cdecl.}](load("glMapBufferRange"))
  glFlushMappedBufferRange = cast[proc (target: GLenum, offset: GLintptr, length: GLsizeiptr) {.cdecl.}](load("glFlushMappedBufferRange"))
  glBindVertexArray = cast[proc (array: GLuint) {.cdecl.}](load("glBindVertexArray"))
  glDeleteVertexArrays = cast[proc (n: GLsizei, arrays: ptr GLuint) {.cdecl.}](load("glDeleteVertexArrays"))
  glGenVertexArrays = cast[proc (n: GLsizei, arrays: ptr GLuint) {.cdecl.}](load("glGenVertexArrays"))
  glIsVertexArray = cast[proc (array: GLuint): GLboolean {.cdecl.}](load("glIsVertexArray"))


proc load_GL_VERSION_3_1(load: proc) =
  if not GLAD_GL_VERSION_3_1: return

  glDrawArraysInstanced = cast[proc (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) {.cdecl.}](load("glDrawArraysInstanced"))
  glDrawElementsInstanced = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei) {.cdecl.}](load("glDrawElementsInstanced"))
  glTexBuffer = cast[proc (target: GLenum, internalformat: GLenum, buffer: GLuint) {.cdecl.}](load("glTexBuffer"))
  glPrimitiveRestartIndex = cast[proc (index: GLuint) {.cdecl.}](load("glPrimitiveRestartIndex"))
  glCopyBufferSubData = cast[proc (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) {.cdecl.}](load("glCopyBufferSubData"))
  glGetUniformIndices = cast[proc (program: GLuint, uniformCount: GLsizei, uniformNames: cstringArray, uniformIndices: ptr GLuint) {.cdecl.}](load("glGetUniformIndices"))
  glGetActiveUniformsiv = cast[proc (program: GLuint, uniformCount: GLsizei, uniformIndices: ptr GLuint, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glGetActiveUniformsiv"))
  glGetActiveUniformName = cast[proc (program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformName: cstring) {.cdecl.}](load("glGetActiveUniformName"))
  glGetUniformBlockIndex = cast[proc (program: GLuint, uniformBlockName: cstring): GLuint {.cdecl.}](load("glGetUniformBlockIndex"))
  glGetActiveUniformBlockiv = cast[proc (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glGetActiveUniformBlockiv"))
  glGetActiveUniformBlockName = cast[proc (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformBlockName: cstring) {.cdecl.}](load("glGetActiveUniformBlockName"))
  glUniformBlockBinding = cast[proc (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) {.cdecl.}](load("glUniformBlockBinding"))
  glBindBufferRange = cast[proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.cdecl.}](load("glBindBufferRange"))
  glBindBufferBase = cast[proc (target: GLenum, index: GLuint, buffer: GLuint) {.cdecl.}](load("glBindBufferBase"))
  glGetIntegeri_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLint) {.cdecl.}](load("glGetIntegeri_v"))


proc load_GL_VERSION_3_2(load: proc) =
  if not GLAD_GL_VERSION_3_2: return

  glDrawElementsBaseVertex = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.cdecl.}](load("glDrawElementsBaseVertex"))
  glDrawRangeElementsBaseVertex = cast[proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.cdecl.}](load("glDrawRangeElementsBaseVertex"))
  glDrawElementsInstancedBaseVertex = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint) {.cdecl.}](load("glDrawElementsInstancedBaseVertex"))
  glMultiDrawElementsBaseVertex = cast[proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei, basevertex: ptr GLint) {.cdecl.}](load("glMultiDrawElementsBaseVertex"))
  glProvokingVertex = cast[proc (mode: GLenum) {.cdecl.}](load("glProvokingVertex"))
  glFenceSync = cast[proc (condition: GLenum, flags: GLbitfield): GLsync {.cdecl.}](load("glFenceSync"))
  glIsSync = cast[proc (sync: GLsync): GLboolean {.cdecl.}](load("glIsSync"))
  glDeleteSync = cast[proc (sync: GLsync) {.cdecl.}](load("glDeleteSync"))
  glClientWaitSync = cast[proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64): GLenum {.cdecl.}](load("glClientWaitSync"))
  glWaitSync = cast[proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64) {.cdecl.}](load("glWaitSync"))
  glGetInteger64v = cast[proc (pname: GLenum, data: ptr GLint64) {.cdecl.}](load("glGetInteger64v"))
  glGetSynciv = cast[proc (sync: GLsync, pname: GLenum, bufSize: GLsizei, length: ptr GLsizei, values: ptr GLint) {.cdecl.}](load("glGetSynciv"))
  glGetInteger64i_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLint64) {.cdecl.}](load("glGetInteger64i_v"))
  glGetBufferParameteri64v = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint64) {.cdecl.}](load("glGetBufferParameteri64v"))
  glFramebufferTexture = cast[proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) {.cdecl.}](load("glFramebufferTexture"))
  glTexImage2DMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) {.cdecl.}](load("glTexImage2DMultisample"))
  glTexImage3DMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) {.cdecl.}](load("glTexImage3DMultisample"))
  glGetMultisamplefv = cast[proc (pname: GLenum, index: GLuint, val: ptr GLfloat) {.cdecl.}](load("glGetMultisamplefv"))
  glSampleMaski = cast[proc (maskNumber: GLuint, mask: GLbitfield) {.cdecl.}](load("glSampleMaski"))


proc findExtensionsGL() =
  discard


proc findCoreGL(glVersion: string) =
  # Thank you @elmindreda
  # https://github.com/elmindreda/greg/blob/master/templates/greg.c.in#L176
  # https://github.com/glfw/glfw/blob/master/src/context.c#L36
  var prefixes = ["OpenGL ES-CM ", "OpenGL ES-CL ", "OpenGL ES "]

  var version = glVersion
  for p in prefixes:
    if version.startsWith(p):
      version = version.replace(p)
      break

  var major = ord(glVersion[0]) - ord('0')
  var minor = ord(glVersion[2]) - ord('0')

  glVersionMajor = major
  glVersionMinor = minor

  GLAD_GL_VERSION_1_0 = (major == 1 and minor >= 0) or major > 1
  GLAD_GL_VERSION_1_1 = (major == 1 and minor >= 1) or major > 1
  GLAD_GL_VERSION_1_2 = (major == 1 and minor >= 2) or major > 1
  GLAD_GL_VERSION_1_3 = (major == 1 and minor >= 3) or major > 1
  GLAD_GL_VERSION_1_4 = (major == 1 and minor >= 4) or major > 1
  GLAD_GL_VERSION_1_5 = (major == 1 and minor >= 5) or major > 1
  GLAD_GL_VERSION_2_0 = (major == 2 and minor >= 0) or major > 2
  GLAD_GL_VERSION_2_1 = (major == 2 and minor >= 1) or major > 2
  GLAD_GL_VERSION_3_0 = (major == 3 and minor >= 0) or major > 3
  GLAD_GL_VERSION_3_1 = (major == 3 and minor >= 1) or major > 3
  GLAD_GL_VERSION_3_2 = (major == 3 and minor >= 2) or major > 3


proc gladLoadGL*(load: proc): bool =
  glGetString = cast[proc (name: GLenum): ptr GLubyte {.cdecl.}](load("glGetString"))
  if glGetString == nil: return false

  var glVersion = cast[cstring](glGetString(GL_VERSION))
  if glVersion == nil: return false

  findCoreGL($glVersion)

  load_GL_VERSION_1_0(load)
  load_GL_VERSION_1_1(load)
  load_GL_VERSION_1_2(load)
  load_GL_VERSION_1_3(load)
  load_GL_VERSION_1_4(load)
  load_GL_VERSION_1_5(load)
  load_GL_VERSION_2_0(load)
  load_GL_VERSION_2_1(load)
  load_GL_VERSION_3_0(load)
  load_GL_VERSION_3_1(load)
  load_GL_VERSION_3_2(load)

  findExtensionsGL()


  return glVersionMajor != 0 or glVersionMinor != 0

