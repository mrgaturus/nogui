#[
    EGL loader generated by glad 0.1.33 on Sun Nov 10 11:35:58 2019.

    Language/Generator: Nim
    Specification: egl
    APIs: egl=1.5
    Profile: -
    Extensions:
        
    Loader: True
    Local files: False
    Omit khrplatform: False
    Reproducible: False

    Commandline:
        --api="egl=1.5" --generator="nim" --spec="egl" --extensions=""
    Online:
        https://glad.dav1d.de/#language=nim&specification=egl&loader=on&api=egl%3D1.5
]#

# This wrapper only works with X11, but it will changed to wayland in a decade
import x11/x, x11/xlib
type
  EGLNativeDisplayType* = PDisplay
  EGLNativePixmapType* = Pixmap
  EGLNativeWindowType* = Window

# Types
type
  EGLAttrib* = int32
  EGLAttribKHR* = int32
  EGLBoolean* = bool
  EGLClientBuffer* = distinct pointer
  EGLConfig* = distinct pointer
  EGLContext* = distinct pointer
  EGLDeviceEXT* = distinct pointer
  EGLDisplay* = distinct pointer
  EGLImage* = distinct pointer
  EGLImageKHR* = distinct pointer
  EGLNativeFileDescriptorKHR* = int32
  EGLOutputLayerEXT* = distinct pointer
  EGLOutputPortEXT* = distinct pointer
  EGLStreamKHR* = distinct pointer
  EGLSurface* = distinct pointer
  EGLSync* = distinct pointer
  EGLSyncKHR* = distinct pointer
  EGLSyncNV* = distinct pointer
  EGLTime* = uint64
  EGLTimeKHR* = uint64
  EGLTimeNV* = uint64
  EGLenum* = uint32
  EGLint* = int32
  EGLsizeiANDROID* = distinct pointer
  EGLuint64KHR* = uint64
  EGLuint64MESA* = uint64
  EGLuint64NV* = uint64


# Enums
const
  EGL_DEFAULT_DISPLAY*: EGLNativeDisplayType = EGLNativeDisplayType(nil)
  EGL_DEPTH_ENCODING_NONE_NV*: uint32 = uint32(0)
  EGL_DISPLAY_SCALING*: uint32 = uint32(10000)
  EGL_DONT_CARE*: int32 = int32(-1)
  EGL_FOREVER*: uint = uint(0xFFFFFFFFFFFFFFFF'u64)
  EGL_FOREVER_KHR*: uint = uint(0xFFFFFFFFFFFFFFFF'u64)
  EGL_FOREVER_NV*: uint = uint(0xFFFFFFFFFFFFFFFF'u64)
  EGL_NO_CONTEXT*: EGLContext = EGLContext(nil)
  EGL_NO_DEVICE_EXT*: EGLDeviceEXT = EGLDeviceEXT(nil)
  EGL_NO_DISPLAY*: EGLDisplay = EGLDisplay(nil)
  EGL_NO_FILE_DESCRIPTOR_KHR*: EGLNativeFileDescriptorKHR = EGLNativeFileDescriptorKHR(-1)
  EGL_NO_IMAGE*: EGLImage = EGLImage(nil)
  EGL_NO_IMAGE_KHR*: EGLImageKHR = EGLImageKHR(nil)
  EGL_NO_NATIVE_FENCE_FD_ANDROID*: uint32 = cast[uint32](-1)
  EGL_NO_OUTPUT_LAYER_EXT*: EGLOutputLayerEXT = EGLOutputLayerEXT(nil)
  EGL_NO_OUTPUT_PORT_EXT*: EGLOutputPortEXT = EGLOutputPortEXT(nil)
  EGL_NO_STREAM_KHR*: EGLStreamKHR = EGLStreamKHR(nil)
  EGL_NO_SURFACE*: EGLSurface = EGLSurface(nil)
  EGL_NO_SYNC*: EGLSync = EGLSync(nil)
  EGL_NO_SYNC_KHR*: EGLSyncKHR = EGLSyncKHR(nil)
  EGL_NO_SYNC_NV*: EGLSyncNV = EGLSyncNV(nil)
  EGL_UNKNOWN*: int32 = int32(-1)

  EGL_ALPHA_SIZE*: EGLenum = EGLenum(0x3021)
  EGL_BAD_ACCESS*: EGLenum = EGLenum(0x3002)
  EGL_BAD_ALLOC*: EGLenum = EGLenum(0x3003)
  EGL_BAD_ATTRIBUTE*: EGLenum = EGLenum(0x3004)
  EGL_BAD_CONFIG*: EGLenum = EGLenum(0x3005)
  EGL_BAD_CONTEXT*: EGLenum = EGLenum(0x3006)
  EGL_BAD_CURRENT_SURFACE*: EGLenum = EGLenum(0x3007)
  EGL_BAD_DISPLAY*: EGLenum = EGLenum(0x3008)
  EGL_BAD_MATCH*: EGLenum = EGLenum(0x3009)
  EGL_BAD_NATIVE_PIXMAP*: EGLenum = EGLenum(0x300A)
  EGL_BAD_NATIVE_WINDOW*: EGLenum = EGLenum(0x300B)
  EGL_BAD_PARAMETER*: EGLenum = EGLenum(0x300C)
  EGL_BAD_SURFACE*: EGLenum = EGLenum(0x300D)
  EGL_BLUE_SIZE*: EGLenum = EGLenum(0x3022)
  EGL_BUFFER_SIZE*: EGLenum = EGLenum(0x3020)
  EGL_CONFIG_CAVEAT*: EGLenum = EGLenum(0x3027)
  EGL_CONFIG_ID*: EGLenum = EGLenum(0x3028)
  EGL_CORE_NATIVE_ENGINE*: EGLenum = EGLenum(0x305B)
  EGL_DEPTH_SIZE*: EGLenum = EGLenum(0x3025)
  EGL_DRAW*: EGLenum = EGLenum(0x3059)
  EGL_EXTENSIONS*: EGLenum = EGLenum(0x3055)
  EGL_FALSE*: EGLenum = EGLenum(0)
  EGL_GREEN_SIZE*: EGLenum = EGLenum(0x3023)
  EGL_HEIGHT*: EGLenum = EGLenum(0x3056)
  EGL_LARGEST_PBUFFER*: EGLenum = EGLenum(0x3058)
  EGL_LEVEL*: EGLenum = EGLenum(0x3029)
  EGL_MAX_PBUFFER_HEIGHT*: EGLenum = EGLenum(0x302A)
  EGL_MAX_PBUFFER_PIXELS*: EGLenum = EGLenum(0x302B)
  EGL_MAX_PBUFFER_WIDTH*: EGLenum = EGLenum(0x302C)
  EGL_NATIVE_RENDERABLE*: EGLenum = EGLenum(0x302D)
  EGL_NATIVE_VISUAL_ID*: EGLenum = EGLenum(0x302E)
  EGL_NATIVE_VISUAL_TYPE*: EGLenum = EGLenum(0x302F)
  EGL_NONE*: EGLenum = EGLenum(0x3038)
  EGL_NON_CONFORMANT_CONFIG*: EGLenum = EGLenum(0x3051)
  EGL_NOT_INITIALIZED*: EGLenum = EGLenum(0x3001)
  EGL_PBUFFER_BIT*: EGLenum = EGLenum(0x0001)
  EGL_PIXMAP_BIT*: EGLenum = EGLenum(0x0002)
  EGL_READ*: EGLenum = EGLenum(0x305A)
  EGL_RED_SIZE*: EGLenum = EGLenum(0x3024)
  EGL_SAMPLES*: EGLenum = EGLenum(0x3031)
  EGL_SAMPLE_BUFFERS*: EGLenum = EGLenum(0x3032)
  EGL_SLOW_CONFIG*: EGLenum = EGLenum(0x3050)
  EGL_STENCIL_SIZE*: EGLenum = EGLenum(0x3026)
  EGL_SUCCESS*: EGLenum = EGLenum(0x3000)
  EGL_SURFACE_TYPE*: EGLenum = EGLenum(0x3033)
  EGL_TRANSPARENT_BLUE_VALUE*: EGLenum = EGLenum(0x3035)
  EGL_TRANSPARENT_GREEN_VALUE*: EGLenum = EGLenum(0x3036)
  EGL_TRANSPARENT_RED_VALUE*: EGLenum = EGLenum(0x3037)
  EGL_TRANSPARENT_RGB*: EGLenum = EGLenum(0x3052)
  EGL_TRANSPARENT_TYPE*: EGLenum = EGLenum(0x3034)
  EGL_TRUE*: EGLenum = EGLenum(1)
  EGL_VENDOR*: EGLenum = EGLenum(0x3053)
  EGL_VERSION*: EGLenum = EGLenum(0x3054)
  EGL_WIDTH*: EGLenum = EGLenum(0x3057)
  EGL_WINDOW_BIT*: EGLenum = EGLenum(0x0004)
  EGL_BACK_BUFFER*: EGLenum = EGLenum(0x3084)
  EGL_BIND_TO_TEXTURE_RGB*: EGLenum = EGLenum(0x3039)
  EGL_BIND_TO_TEXTURE_RGBA*: EGLenum = EGLenum(0x303A)
  EGL_CONTEXT_LOST*: EGLenum = EGLenum(0x300E)
  EGL_MIN_SWAP_INTERVAL*: EGLenum = EGLenum(0x303B)
  EGL_MAX_SWAP_INTERVAL*: EGLenum = EGLenum(0x303C)
  EGL_MIPMAP_TEXTURE*: EGLenum = EGLenum(0x3082)
  EGL_MIPMAP_LEVEL*: EGLenum = EGLenum(0x3083)
  EGL_NO_TEXTURE*: EGLenum = EGLenum(0x305C)
  EGL_TEXTURE_2D*: EGLenum = EGLenum(0x305F)
  EGL_TEXTURE_FORMAT*: EGLenum = EGLenum(0x3080)
  EGL_TEXTURE_RGB*: EGLenum = EGLenum(0x305D)
  EGL_TEXTURE_RGBA*: EGLenum = EGLenum(0x305E)
  EGL_TEXTURE_TARGET*: EGLenum = EGLenum(0x3081)
  EGL_ALPHA_FORMAT*: EGLenum = EGLenum(0x3088)
  EGL_ALPHA_FORMAT_NONPRE*: EGLenum = EGLenum(0x308B)
  EGL_ALPHA_FORMAT_PRE*: EGLenum = EGLenum(0x308C)
  EGL_ALPHA_MASK_SIZE*: EGLenum = EGLenum(0x303E)
  EGL_BUFFER_PRESERVED*: EGLenum = EGLenum(0x3094)
  EGL_BUFFER_DESTROYED*: EGLenum = EGLenum(0x3095)
  EGL_CLIENT_APIS*: EGLenum = EGLenum(0x308D)
  EGL_COLORSPACE*: EGLenum = EGLenum(0x3087)
  EGL_COLORSPACE_sRGB*: EGLenum = EGLenum(0x3089)
  EGL_COLORSPACE_LINEAR*: EGLenum = EGLenum(0x308A)
  EGL_COLOR_BUFFER_TYPE*: EGLenum = EGLenum(0x303F)
  EGL_CONTEXT_CLIENT_TYPE*: EGLenum = EGLenum(0x3097)
  EGL_HORIZONTAL_RESOLUTION*: EGLenum = EGLenum(0x3090)
  EGL_LUMINANCE_BUFFER*: EGLenum = EGLenum(0x308F)
  EGL_LUMINANCE_SIZE*: EGLenum = EGLenum(0x303D)
  EGL_OPENGL_ES_BIT*: EGLenum = EGLenum(0x0001)
  EGL_OPENVG_BIT*: EGLenum = EGLenum(0x0002)
  EGL_OPENGL_ES_API*: EGLenum = EGLenum(0x30A0)
  EGL_OPENVG_API*: EGLenum = EGLenum(0x30A1)
  EGL_OPENVG_IMAGE*: EGLenum = EGLenum(0x3096)
  EGL_PIXEL_ASPECT_RATIO*: EGLenum = EGLenum(0x3092)
  EGL_RENDERABLE_TYPE*: EGLenum = EGLenum(0x3040)
  EGL_RENDER_BUFFER*: EGLenum = EGLenum(0x3086)
  EGL_RGB_BUFFER*: EGLenum = EGLenum(0x308E)
  EGL_SINGLE_BUFFER*: EGLenum = EGLenum(0x3085)
  EGL_SWAP_BEHAVIOR*: EGLenum = EGLenum(0x3093)
  EGL_VERTICAL_RESOLUTION*: EGLenum = EGLenum(0x3091)
  EGL_CONFORMANT*: EGLenum = EGLenum(0x3042)
  EGL_CONTEXT_CLIENT_VERSION*: EGLenum = EGLenum(0x3098)
  EGL_MATCH_NATIVE_PIXMAP*: EGLenum = EGLenum(0x3041)
  EGL_OPENGL_ES2_BIT*: EGLenum = EGLenum(0x0004)
  EGL_VG_ALPHA_FORMAT*: EGLenum = EGLenum(0x3088)
  EGL_VG_ALPHA_FORMAT_NONPRE*: EGLenum = EGLenum(0x308B)
  EGL_VG_ALPHA_FORMAT_PRE*: EGLenum = EGLenum(0x308C)
  EGL_VG_ALPHA_FORMAT_PRE_BIT*: EGLenum = EGLenum(0x0040)
  EGL_VG_COLORSPACE*: EGLenum = EGLenum(0x3087)
  EGL_VG_COLORSPACE_sRGB*: EGLenum = EGLenum(0x3089)
  EGL_VG_COLORSPACE_LINEAR*: EGLenum = EGLenum(0x308A)
  EGL_VG_COLORSPACE_LINEAR_BIT*: EGLenum = EGLenum(0x0020)
  EGL_MULTISAMPLE_RESOLVE_BOX_BIT*: EGLenum = EGLenum(0x0200)
  EGL_MULTISAMPLE_RESOLVE*: EGLenum = EGLenum(0x3099)
  EGL_MULTISAMPLE_RESOLVE_DEFAULT*: EGLenum = EGLenum(0x309A)
  EGL_MULTISAMPLE_RESOLVE_BOX*: EGLenum = EGLenum(0x309B)
  EGL_OPENGL_API*: EGLenum = EGLenum(0x30A2)
  EGL_OPENGL_BIT*: EGLenum = EGLenum(0x0008)
  EGL_SWAP_BEHAVIOR_PRESERVED_BIT*: EGLenum = EGLenum(0x0400)
  EGL_CONTEXT_MAJOR_VERSION*: EGLenum = EGLenum(0x3098)
  EGL_CONTEXT_MINOR_VERSION*: EGLenum = EGLenum(0x30FB)
  EGL_CONTEXT_OPENGL_PROFILE_MASK*: EGLenum = EGLenum(0x30FD)
  EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY*: EGLenum = EGLenum(0x31BD)
  EGL_NO_RESET_NOTIFICATION*: EGLenum = EGLenum(0x31BE)
  EGL_LOSE_CONTEXT_ON_RESET*: EGLenum = EGLenum(0x31BF)
  EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT*: EGLenum = EGLenum(0x00000001)
  EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT*: EGLenum = EGLenum(0x00000002)
  EGL_CONTEXT_OPENGL_DEBUG*: EGLenum = EGLenum(0x31B0)
  EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE*: EGLenum = EGLenum(0x31B1)
  EGL_CONTEXT_OPENGL_ROBUST_ACCESS*: EGLenum = EGLenum(0x31B2)
  EGL_OPENGL_ES3_BIT*: EGLenum = EGLenum(0x00000040)
  EGL_CL_EVENT_HANDLE*: EGLenum = EGLenum(0x309C)
  EGL_SYNC_CL_EVENT*: EGLenum = EGLenum(0x30FE)
  EGL_SYNC_CL_EVENT_COMPLETE*: EGLenum = EGLenum(0x30FF)
  EGL_SYNC_PRIOR_COMMANDS_COMPLETE*: EGLenum = EGLenum(0x30F0)
  EGL_SYNC_TYPE*: EGLenum = EGLenum(0x30F7)
  EGL_SYNC_STATUS*: EGLenum = EGLenum(0x30F1)
  EGL_SYNC_CONDITION*: EGLenum = EGLenum(0x30F8)
  EGL_SIGNALED*: EGLenum = EGLenum(0x30F2)
  EGL_UNSIGNALED*: EGLenum = EGLenum(0x30F3)
  EGL_SYNC_FLUSH_COMMANDS_BIT*: EGLenum = EGLenum(0x0001)
  EGL_TIMEOUT_EXPIRED*: EGLenum = EGLenum(0x30F5)
  EGL_CONDITION_SATISFIED*: EGLenum = EGLenum(0x30F6)
  EGL_SYNC_FENCE*: EGLenum = EGLenum(0x30F9)
  EGL_GL_COLORSPACE*: EGLenum = EGLenum(0x309D)
  EGL_GL_COLORSPACE_SRGB*: EGLenum = EGLenum(0x3089)
  EGL_GL_COLORSPACE_LINEAR*: EGLenum = EGLenum(0x308A)
  EGL_GL_RENDERBUFFER*: EGLenum = EGLenum(0x30B9)
  EGL_GL_TEXTURE_2D*: EGLenum = EGLenum(0x30B1)
  EGL_GL_TEXTURE_LEVEL*: EGLenum = EGLenum(0x30BC)
  EGL_GL_TEXTURE_3D*: EGLenum = EGLenum(0x30B2)
  EGL_GL_TEXTURE_ZOFFSET*: EGLenum = EGLenum(0x30BD)
  EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X*: EGLenum = EGLenum(0x30B3)
  EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X*: EGLenum = EGLenum(0x30B4)
  EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y*: EGLenum = EGLenum(0x30B5)
  EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y*: EGLenum = EGLenum(0x30B6)
  EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z*: EGLenum = EGLenum(0x30B7)
  EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z*: EGLenum = EGLenum(0x30B8)
  EGL_IMAGE_PRESERVED*: EGLenum = EGLenum(0x30D2)


# Functions
{.passL: "-lEGL".}

proc eglChooseConfig*(dpy: EGLDisplay, attrib_list: ptr EGLint, configs: ptr EGLConfig, config_size: EGLint, num_config: ptr EGLint): EGLBoolean {.importc, cdecl.}
proc eglCopyBuffers*(dpy: EGLDisplay, surface: EGLSurface, target: EGLNativePixmapType): EGLBoolean {.importc, cdecl.}
proc eglCreateContext*(dpy: EGLDisplay, config: EGLConfig, share_context: EGLContext, attrib_list: ptr EGLint): EGLContext {.importc, cdecl.}
proc eglCreatePbufferSurface*(dpy: EGLDisplay, config: EGLConfig, attrib_list: ptr EGLint): EGLSurface {.importc, cdecl.}
proc eglCreatePixmapSurface*(dpy: EGLDisplay, config: EGLConfig, pixmap: EGLNativePixmapType, attrib_list: ptr EGLint): EGLSurface {.importc, cdecl.}
proc eglCreateWindowSurface*(dpy: EGLDisplay, config: EGLConfig, win: EGLNativeWindowType, attrib_list: ptr EGLint): EGLSurface {.importc, cdecl.}
proc eglDestroyContext*(dpy: EGLDisplay, ctx: EGLContext): EGLBoolean {.importc, cdecl.}
proc eglDestroySurface*(dpy: EGLDisplay, surface: EGLSurface): EGLBoolean {.importc, cdecl.}
proc eglGetConfigAttrib*(dpy: EGLDisplay, config: EGLConfig, attribute: EGLint, value: ptr EGLint): EGLBoolean {.importc, cdecl.}
proc eglGetConfigs*(dpy: EGLDisplay, configs: ptr EGLConfig, config_size: EGLint, num_config: ptr EGLint): EGLBoolean {.importc, cdecl.}
proc eglGetCurrentDisplay*(): EGLDisplay {.importc, cdecl.}
proc eglGetCurrentSurface*(readdraw: EGLint): EGLSurface {.importc, cdecl.}
proc eglGetDisplay*(display_id: EGLNativeDisplayType): EGLDisplay {.importc, cdecl.}
proc eglGetError*(): EGLint {.importc, cdecl.}
proc eglGetProcAddress*(procname: cstring): pointer {.importc, cdecl.}
proc eglInitialize*(dpy: EGLDisplay, major: ptr EGLint, minor: ptr EGLint): EGLBoolean {.importc, cdecl.}
proc eglMakeCurrent*(dpy: EGLDisplay, draw: EGLSurface, read: EGLSurface, ctx: EGLContext): EGLBoolean {.importc, cdecl.}
proc eglQueryContext*(dpy: EGLDisplay, ctx: EGLContext, attribute: EGLint, value: ptr EGLint): EGLBoolean {.importc, cdecl.}
proc eglQueryString*(dpy: EGLDisplay, name: EGLint): cstring {.importc, cdecl.}
proc eglQuerySurface*(dpy: EGLDisplay, surface: EGLSurface, attribute: EGLint, value: ptr EGLint): EGLBoolean {.importc, cdecl.}
proc eglSwapBuffers*(dpy: EGLDisplay, surface: EGLSurface): EGLBoolean {.importc, cdecl.}
proc eglTerminate*(dpy: EGLDisplay): EGLBoolean {.importc, cdecl.}
proc eglWaitGL*(): EGLBoolean {.importc, cdecl.}
proc eglWaitNative*(engine: EGLint): EGLBoolean {.importc, cdecl.}
proc eglBindTexImage*(dpy: EGLDisplay, surface: EGLSurface, buffer: EGLint): EGLBoolean {.importc, cdecl.}
proc eglReleaseTexImage*(dpy: EGLDisplay, surface: EGLSurface, buffer: EGLint): EGLBoolean {.importc, cdecl.}
proc eglSurfaceAttrib*(dpy: EGLDisplay, surface: EGLSurface, attribute: EGLint, value: EGLint): EGLBoolean {.importc, cdecl.}
proc eglSwapInterval*(dpy: EGLDisplay, interval: EGLint): EGLBoolean {.importc, cdecl.}
proc eglBindAPI*(api: EGLenum): EGLBoolean {.importc, cdecl.}
proc eglQueryAPI*(): EGLenum {.importc, cdecl.}
proc eglCreatePbufferFromClientBuffer*(dpy: EGLDisplay, buftype: EGLenum, buffer: EGLClientBuffer, config: EGLConfig, attrib_list: ptr EGLint): EGLSurface {.importc, cdecl.}
proc eglReleaseThread*(): EGLBoolean {.importc, cdecl.}
proc eglWaitClient*(): EGLBoolean {.importc, cdecl.}
proc eglGetCurrentContext*(): EGLContext {.importc, cdecl.}
proc eglCreateSync*(dpy: EGLDisplay, `type`: EGLenum, attrib_list: ptr EGLAttrib): EGLSync {.importc, cdecl.}
proc eglDestroySync*(dpy: EGLDisplay, sync: EGLSync): EGLBoolean {.importc, cdecl.}
proc eglClientWaitSync*(dpy: EGLDisplay, sync: EGLSync, flags: EGLint, timeout: EGLTime): EGLint {.importc, cdecl.}
proc eglGetSyncAttrib*(dpy: EGLDisplay, sync: EGLSync, attribute: EGLint, value: ptr EGLAttrib): EGLBoolean {.importc, cdecl.}
proc eglCreateImage*(dpy: EGLDisplay, ctx: EGLContext, target: EGLenum, buffer: EGLClientBuffer, attrib_list: ptr EGLAttrib): EGLImage {.importc, cdecl.}
proc eglDestroyImage*(dpy: EGLDisplay, image: EGLImage): EGLBoolean {.importc, cdecl.}
proc eglGetPlatformDisplay*(platform: EGLenum, native_display: pointer, attrib_list: ptr EGLAttrib): EGLDisplay {.importc, cdecl.}
proc eglCreatePlatformWindowSurface*(dpy: EGLDisplay, config: EGLConfig, native_window: pointer, attrib_list: ptr EGLAttrib): EGLSurface {.importc, cdecl.}
proc eglCreatePlatformPixmapSurface*(dpy: EGLDisplay, config: EGLConfig, native_pixmap: pointer, attrib_list: ptr EGLAttrib): EGLSurface {.importc, cdecl.}
proc eglWaitSync*(dpy: EGLDisplay, sync: EGLSync, flags: EGLint): EGLBoolean {.importc, cdecl.}